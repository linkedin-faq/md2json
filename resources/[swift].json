[{"question":" What is this code an example of?","options":[{"text":"a syntax issue","correct":true},{"text":"typecasting","correct":false},{"text":"assignment","correct":false},{"text":"initialization","correct":false}],"illustrator":"```swift\nlet val = (Double)6\n```"},{"question":" What is the error in this code?","options":[{"text":"The guard is missing the else.","correct":true},{"text":"Nothing is wrong.","correct":false},{"text":"The guard is missing a then.","correct":false},{"text":"The comparison is wrong.","correct":false}],"illustrator":"```swift\nlet x = 5\nguard x == 5 { return }\n```"},{"question":" What is the raw/underlying type of this enum?","options":[{"text":"There is none.","correct":true},{"text":"String","correct":false},{"text":"Any","correct":false},{"text":"Int","correct":false}],"illustrator":"```swift\nenum Direction {\n  case north, south, east, west\n}\n```"},{"question":" Why is dispatchGroup used in certain situations?","options":[{"text":"It allows multiple synchronous or asynchronous operations to run on different queues.","correct":false},{"text":"It allows track and control execution of multiple operations together.","correct":false},{"text":"It allows operations to wait for each other as desired.","correct":false},{"text":"all of these answers.","correct":true}],"illustrator":""},{"question":" What is this code an example of?","options":[{"text":"string interpolation","correct":true},{"text":"string compilation","correct":false},{"text":"method chaining","correct":false},{"text":"string concatenation","correct":false}],"illustrator":"```swift\nlet val = 5\nprint(\"value is: \\(val)\")\n```"},{"question":" What are the contents of `vals` after this code is executed?","options":[{"text":"[10, 2]","correct":true},{"text":"[2, 10]","correct":false},{"text":"nil","correct":false},{"text":"This code contains an error","correct":false}],"illustrator":"```swift\nvar vals = [10, 2]\nvals.sort { (s1, s2) -> Bool in\n  s1 > s2\n}\n```"},{"question":" What does this code print?","options":[{"text":"Dictionary<String, Any>","correct":true},{"text":"Dictionary","correct":false},{"text":"ERROR","correct":false},{"text":"Thing","correct":false}],"illustrator":"```swift\ntypealias Thing = [String:Any]\nvar stuff: Thing\nprint(type(of: stuff))\n```"},{"question":" What is the value of y?","options":[{"text":"This code contains an error","correct":true},{"text":"1","correct":false},{"text":"2","correct":false},{"text":"nil","correct":false}],"illustrator":"```swift\nlet x = [\"1\", \"2\"].dropFirst()\nlet y = x[0]\n```"},{"question":" What is the value of test in this code?","options":[{"text":"TRUE","correct":true},{"text":"YES","correct":false},{"text":"1","correct":false},{"text":"This code contains an error","correct":false}],"illustrator":"```swift\nvar test = 1 == 1\n```"},{"question":". What is the value of y?","options":[{"text":"5","correct":true},{"text":"0","correct":false},{"text":"nil","correct":false},{"text":"This code contains an error","correct":false}],"illustrator":"```swift\nvar x: Int?\nlet y = x ?? 5\n```"},{"question":". What is the type of this function?","options":[{"text":"Int","correct":false},{"text":"(Int, Int) -> Int","correct":true},{"text":"Int<Optional>","correct":false},{"text":"Functions don't have types.","correct":false}],"illustrator":"```swift\nfunc add(a: Int, b: Int) -> Int { return a+b }\n```"},{"question":". What is the correct way to call this function?","options":[{"text":"myFunc(5, b: 6)","correct":true},{"text":"myFunc(5, 6)","correct":false},{"text":"myFunc(a: 5, b: 6)","correct":false},{"text":"myFunc(a, b)","correct":false}],"illustrator":"```swift\nfunc myFunc(_ a: Int, b: Int) -> Int {\n  return a + b\n}\n```"},{"question":". The Codable protocol is **\\_**?","options":[{"text":"a combination of Encodable and Decodable","correct":true},{"text":"not a true protocol <<<<---Possibly correct as it's a typealias of Encodable and Decodable","correct":false},{"text":"required of all classes","correct":false},{"text":"automatically included in all classes","correct":false}],"illustrator":""},{"question":". What is the type of value1 in this code?","options":[{"text":"String","correct":true},{"text":"Int","correct":false},{"text":"null","correct":false},{"text":"test.count","correct":false}],"illustrator":"```swift\nlet value1 = \"\\(\"test\".count)\"\n```"},{"question":". When a function takes a closure as a parameter, when do you want to mark is as escaping?","options":[{"text":"when it's executed after the function returns","correct":true},{"text":"when it's scope is undefined","correct":false},{"text":"when it's lazy loaded","correct":false},{"text":"all of these answers","correct":false}],"illustrator":""},{"question":". What's wrong with this code?","options":[{"text":"Person has no initializers.","correct":true},{"text":"Person has no base class.","correct":false},{"text":"var name is not formatted corrrectly.","correct":false},{"text":"address is a keyword.","correct":false}],"illustrator":"```swift\nclass Person {\n  var name: String\n  var address: String\n}\n```"},{"question":". What is the value of names after this code is executed?","options":[{"text":"[\"BEAR\", \"JOE\", \"CLARK\"]","correct":false},{"text":"[\"B\", \"J\", \"C\"]","correct":false},{"text":"[\"Bear\", \"Joe\", \"Clark\"]","correct":true},{"text":"This code contains an error.","correct":false}],"illustrator":"```swift\nlet names = [\"Bear\", \"Joe\", \"Clark\"]\nnames.map { (s) -> String in\n  return s.uppercased()\n}\n```"},{"question":". What describes this line of code?","options":[{"text":"a constant named val of type Int","correct":true},{"text":"a variable named val of type item","correct":false},{"text":"a constant named val of type Number","correct":false},{"text":"a variable named val of type Int","correct":false}],"illustrator":"```swift\nlet val = 5\n```"},{"question":". What is the error in this code?","options":[{"text":"Extensions can't add properties. // although extensions technically can't contain stored properties","correct":true},{"text":"Nothing is wrong with it.","correct":false},{"text":"didSet takes a parameter.","correct":false},{"text":"c is not a character.","correct":false}],"illustrator":"```swift\nextension String {\n  var firstLetter: Character = \"c\" {\n    didSet {\n      print(\"new value\")\n    }\n  }\n}\n```"},{"question":". didSet and willSet are examples of **\\_**?","options":[{"text":"property observers","correct":true},{"text":"key properties","correct":false},{"text":"all of these answers","correct":false},{"text":"newOld value calls","correct":false}],"illustrator":""},{"question":". What is wrong with this code?","options":[{"text":"Use of self inside the closure causes retain cycle.","correct":true},{"text":"You cannot assign a value to closure in this manner.","correct":false},{"text":"You need to define the type of closure explicitly.","correct":false},{"text":"There is nothing wrong with this code.","correct":false}],"illustrator":"```swift\nself.callback = {\n  self.attempts += 1\n  self.downloadFailed()\n}\n```"},{"question":". How many values does vals have after this code is executed?","options":[{"text":"three","correct":false},{"text":"four","correct":false},{"text":"eight","correct":false},{"text":"This code contains an error.","correct":true}],"illustrator":"```swift\nvar vals = Set<String> = [\"4\", \"5\", \"6\"]\nvals.insert(\"5\")\n```"},{"question":". How can you avoid a strong reference cycle in a closure?","options":[{"text":"Use a capture list to set class instances of weak or unowned.","correct":true},{"text":"You can't, there will always be a danger of strong reference cycles inside a closure.","correct":false},{"text":"Initialize the closure as read-only.","correct":false},{"text":"Declare the closure variable as lazy.","correct":false}],"illustrator":""},{"question":". What is wrong with this code?","options":[{"text":"This String initializer does not return an optional.","correct":true},{"text":"String does not have an initializer that can take a String.","correct":false},{"text":"= is not a comparison.","correct":false},{"text":"Nothing is wrong with this code.","correct":false}],"illustrator":"```swift\nif let s = String.init(\"some string\") {\n  print(s)\n}\n```"},{"question":". Which code snippet correctly creates a typealias closure?","options":[{"text":"typealias CustomClosure: () -> ()","correct":true},{"text":"typealias CustomClosure { () -> () }","correct":false},{"text":"typealias CustomClosure -> () -> ()","correct":false},{"text":"typealias CustomClosure -> () {}","correct":false}],"illustrator":""},{"question":". How do you reference class members from within a class?","options":[{"text":"self","correct":true},{"text":"instance","correct":false},{"text":"class","correct":false},{"text":"this","correct":false}],"illustrator":""},{"question":". All value types in Swift are **\\_** under the hood?","options":[{"text":"structs","correct":true},{"text":"classes","correct":false},{"text":"optionals","correct":false},{"text":"generics","correct":false}],"illustrator":""},{"question":". What is the correct way to add a value to this array?","options":[{"text":"all of these answers","correct":true},{"text":"strings.append(4)","correct":false},{"text":"strings.insert(5, at: 1)","correct":false},{"text":"strings += [5]","correct":false}],"illustrator":"```swift\nvar strings = [1, 2, 3]\n```"},{"question":". How many times will this loop be executed?","options":[{"text":"0","correct":false},{"text":"101","correct":true},{"text":"99","correct":false},{"text":"100","correct":false}],"illustrator":"```swift\nfor i in 0...100 {\n  print(i)\n}\n```"},{"question":". What can AnyObject represent?","options":[{"text":"an instance of any class","correct":false},{"text":"an instance of function type","correct":false},{"text":"all of these answers","correct":true},{"text":"an instance of an optional type","correct":false}],"illustrator":""},{"question":". What is the value of t after this code is executed?","options":[{"text":"This code is invalid.","correct":true},{"text":"This code does not compile.","correct":true},{"text":"0","correct":false},{"text":"1","correct":false},{"text":"Larry","correct":false}],"illustrator":"```swift\nlet names = [\"Larry\", \"Sven\", \"Bear\"]\nlet t = names.enumerated().first().offset\n```"},{"question":". What is the value of test after this code executes?","options":[{"text":"ABC","correct":true},{"text":"0","correct":false},{"text":"5","correct":false},{"text":"name","correct":false}],"illustrator":"```swift\nlet vt = (name: \"ABC\", val: 5)\nlet test = vt.0\n```"},{"question":". What is the base class in this code?","options":[{"text":"MMM","correct":true},{"text":"LSN","correct":false},{"text":"There is no base class.","correct":false},{"text":"This code is invalid.","correct":false}],"illustrator":"```swift\nclass LSN : MMM {\n}\n```"},{"question":". What does this code print to the console?","options":[{"text":"About to set userLocation to Work… userLocation updated with new value!","correct":true},{"text":"About to set userLocation to Work… userLocation already set to that value…","correct":false},{"text":"About to set userLocation to Home… userLocation updated to new value!","correct":false},{"text":"ERROR","correct":false}],"illustrator":"```swift\nvar userLocation: String = \"Home\" {\n  willSet(newValue) {\n  print(\"About to set userLocation to \\(newValue)...\")\n  }\n  didSet {\n  if userLocation != oldValue {\n  print(\"userLocation updated with new value!\")\n  } else {\n  print(\"userLocation already set to that value...\")\n  }\n  }\n }\n userLocation = \"Work\"\n```"},{"question":". What must a convenience initializer call?","options":[{"text":"a base class convenience initializer","correct":false},{"text":"either a designated or another convenience initializer","correct":false},{"text":"a designated initializer","correct":true},{"text":"none of these answers","correct":false}],"illustrator":""},{"question":". Which object allows you access to specify that a block of code runs in a background thread?","options":[{"text":"DispatchQueue.visible","correct":false},{"text":"DispatchQueue.global","correct":true},{"text":"errorExample need to be labeled as `throws`.","correct":false},{"text":"DispatchQueue.background","correct":false}],"illustrator":""},{"question":". What is the inferred type of x?","options":[{"text":"`String[]`","correct":false},{"text":"`Array<String>`","correct":true},{"text":"`Set<String>`","correct":false},{"text":"`Array<Character>`","correct":false}],"illustrator":"```swift\nlet x = [\"a\", \"b\", \"c\"]\n```"},{"question":". What is the value of `oThings` after this code is executed?","options":[{"text":"11212three","correct":false},{"text":"115","correct":false},{"text":"12three","correct":true},{"text":"Nothing, this code is invalid.","correct":false}],"illustrator":"```swift\nlet nThings: [Any] = [1, \"2\", \"three\"]\nlet oThings = nThings.reduce(\"\") { \"\\($0)\\($1)\" }\n```"},{"question":". How would you call a function that throws errors and also returns a value?","options":[{"text":"`!try`","correct":false},{"text":"`try?`","correct":true},{"text":"`try!`","correct":false},{"text":"`?try`","correct":false}],"illustrator":""},{"question":". What is wrong with this code?","options":[{"text":"Protocol functions cannot have return types.","correct":false},{"text":"Protocol functions cannot have implementations.","correct":true},{"text":"Nothing is wrong with it.","correct":false},{"text":"`add` is a reserved keyword.","correct":false}],"illustrator":"```swift\nprotocol TUI {\n  func add(x1 : Int, x2 : Int) -> Int {\n    return x1 + x2\n  }\n}\n```"},{"question":". In this code, what are `wheels` and `doors` examples of?","options":[{"text":"class members","correct":false},{"text":"This code is invalid.","correct":false},{"text":"class fields","correct":false},{"text":"class properties","correct":true}],"illustrator":"```swift\nclass Car {\n  var wheels: Int = 4\n  let doors = 4\n}\n```"},{"question":". How do you designated a failable initializer?","options":[{"text":"You cannot","correct":false},{"text":"deinit","correct":false},{"text":"`init?`","correct":true},{"text":"init","correct":false}],"illustrator":""},{"question":". What is printed when this code is executed?","options":[{"text":"five","correct":false},{"text":"5a","correct":false},{"text":"`.asString()`","correct":true},{"text":"5","correct":false}],"illustrator":"```swift\nlet dbl = Double.init(\"5a\")\nprint(dbl ?? \".asString()\")\n```"},{"question":". In the function below, what are `this` and `toThat` examples of?","options":[{"text":"none of these answers","correct":false},{"text":"local terms","correct":false},{"text":"argument labels","correct":true},{"text":"parameters names","correct":false}],"illustrator":"```swift\nfunc add(this x: Int, toThat y: Int)->{}\n```"},{"question":". What is wrong with this code?","options":[{"text":"The interaction source is invalid","correct":false},{"text":"The interaction variable is invalid","correct":false},{"text":"There is nothing wrong with this code","correct":true},{"text":"The comma in the print is misplaced","correct":false}],"illustrator":"```swift\nfor (key, value) in [1: \"one\", 2: \"two\"]{\n  print(key, value)\n}\n```"},{"question":". Which of these choices is associated with unit testing?","options":[{"text":"XCTest","correct":false},{"text":"all of these answers","correct":true},{"text":"@testable","correct":false},{"text":"XCAssert","correct":false}],"illustrator":""},{"question":". In the code below, what is width an example of?","options":[{"text":"This code contains error","correct":false},{"text":"a closure","correct":false},{"text":"a computed property","correct":true},{"text":"lazy loading","correct":false}],"illustrator":"```swift\nclass Square{\n  var height: Int = 0\n  var width : Int {\n    return height\n  }\n}\n```"},{"question":". What data type is this an example of?","options":[{"text":"a dictionary","correct":false},{"text":"a tuple","correct":true},{"text":"an optional","correct":false},{"text":"This code contains error","correct":false}],"illustrator":"```swift\nlet vals = (\"val\", 1)\n```"},{"question":". What is wrong with this code?","options":[{"text":"You cannot assign a Double to a variable of type Int","correct":true},{"text":"x is undefined","correct":false},{"text":"x is a constant","correct":false},{"text":"x has no type","correct":false}],"illustrator":"```swift\nvar x = 5\nx = 10.0\n```"},{"question":". What will this code print to the console?","options":[{"text":"Any","correct":false},{"text":"test","correct":false},{"text":"1,2,3","correct":false},{"text":"nil","correct":true}],"illustrator":"```swift\nvar items = [\"a\":1, \"b\":2, \"c\":\"test\"] as [String: Any]\nitems[\"c\"] = nil\nprint(items[\"c\"] as Any)\n```"},{"question":". What is wrong with this code?","options":[{"text":"There is nothing wrong with this code","correct":true},{"text":"val is a constant and cannot be changed","correct":false},{"text":"5.0 and 10 are different types","correct":false},{"text":"There is no semicolon","correct":false}],"illustrator":"```swift\nlet val = 5.0 + 10\n```"},{"question":". How many parameters does the initializer for Test have?","options":[{"text":"zero","correct":false},{"text":"This code contains an error","correct":false},{"text":"two","correct":true},{"text":"Structs do not have initializers","correct":false}],"illustrator":"```swift\nstruct Test{\n  var score: Int\n  var date: Date\n}\n```"},{"question":". What prints to the console when executing this code?","options":[{"text":"nil","correct":false},{"text":"Nothing - this code contains an error","correct":false},{"text":"Optional(\"test\")","correct":true},{"text":"test","correct":false}],"illustrator":"```swift\nlet x = try? String.init(\"test\")\nprint(x)\n```"},{"question":". How can you sort this array?","options":[{"text":"`vals.sort { $0 < $1 }`","correct":false},{"text":"`vals.sort { (s1, s2) in s1 < s2 }`","correct":false},{"text":"`vals.sort(by: <)`","correct":false},{"text":"all of these answers","correct":true}],"illustrator":"```swift\nvar vals = [1,2,3]\n```"},{"question":". DispatchQueue.main.async takes a block that will be","options":[{"text":"not executed","correct":false},{"text":"executed in the main queue","correct":true},{"text":"none of these answers","correct":false},{"text":"executed on the background thread","correct":false}],"illustrator":""},{"question":". When is deinit called?","options":[{"text":"When a class instance needs memory","correct":false},{"text":"All of these answers","correct":true},{"text":"When the executable code is finished","correct":false},{"text":"When a class instance is being removed from memory","correct":false}],"illustrator":""},{"question":". How do you declare an optional String?","options":[{"text":"String?","correct":true},{"text":"Optional[String]","correct":false},{"text":"[String]?","correct":false},{"text":"?String","correct":false}],"illustrator":""},{"question":". How many times this code will be executed? —OR— How many times will this loop be performed?","options":[{"text":"one","correct":false},{"text":"two","correct":true},{"text":"three","correct":false},{"text":"This code does not compile","correct":false}],"illustrator":"```swift\nfor i in [\"0\", \"1\"]{\n  print(i)\n}\n```"},{"question":". What does this code print?","options":[{"text":"1Bear","correct":false},{"text":"BearBear","correct":false},{"text":"TonyBear","correct":true},{"text":"Nothing, this code is invalid","correct":false}],"illustrator":"```swift\nlet names = [\"Bear\", \"Tony\", \"Svante\"]\nprint(names[1]+\"Bear\")\n```"},{"question":". What is true of this code?","options":[{"text":"name can hold only a string value.","correct":false},{"text":"name can hold either a string or nil value.","correct":true},{"text":"Optional values cannot be `let` constants.","correct":false},{"text":"Only non-empty string variables can be stored in name.","correct":false}],"illustrator":"```swift\nlet name: String?\n```"},{"question":". What is the value of `val` after this code is executed?","options":[{"text":"This code is invalid.","correct":true},{"text":"6","correct":false},{"text":"30","correct":false},{"text":"0","correct":false}],"illustrator":"```swift\nlet i = 5\nlet val = i * 6.0\n```"},{"question":". What does this code print?","options":[{"text":"3","correct":true},{"text":"0","correct":false},{"text":"other","correct":false},{"text":"nil","correct":false}],"illustrator":"```swift\nenum Positions : Int {\n  case first, second, third, other\n}\nprint (Positions.other.rawValue)\n```"},{"question":". What is printed to the console when this code is executed?","options":[{"text":"nil","correct":false},{"text":"Nothing, since the code contains an error","correct":false},{"text":"t","correct":true},{"text":"zero","correct":false}],"illustrator":"```swift\n\"t\".forEach { (char) in\n    print(char)\n}\n```"},{"question":". What prints when this code is executed?","options":[{"text":"[]","correct":false},{"text":"[\"3\", \"2\", \"1\"]","correct":true},{"text":"[321]","correct":false},{"text":"[\"1\", \"2\", \"3\"]","correct":false}],"illustrator":"```swift\nlet s1 = [\"1\", \"2\", \"3\"]\n    .filter { $0 > \"0\" }\n    .sorted { $0 > $1 }\nprint(s1)\n```"},{"question":". What enumeration feature allows them to store case-specific data?","options":[{"text":"associated values","correct":true},{"text":"integral values","correct":false},{"text":"raw values","correct":false},{"text":"custom values","correct":false}],"illustrator":""},{"question":". In the code below, AOM must be a(n)?","options":[{"text":"class","correct":false},{"text":"protocol","correct":true},{"text":"enumeration","correct":false},{"text":"struct","correct":false}],"illustrator":"```swift\nclass AmP : MMM, AOM {\n  }\n```"},{"question":". What is the value of numbers in the code below?","options":[{"text":"[1,3,5]","correct":false},{"text":"[]","correct":false},{"text":"[2,4,6]","correct":true},{"text":"nil","correct":false}],"illustrator":"```swift\nlet numbers = [1,2,3,4,5,6].filter{ $0 % 2 == 0}\n```"},{"question":". What is the type of `vals` in this code?","options":[{"text":"Array(char)","correct":false},{"text":"[Any]","correct":true},{"text":"Array<char>","correct":false},{"text":"[Generic]","correct":false}],"illustrator":"```swift\nlet vals = [\"a\", 1, \"Hi\"]\n```"},{"question":". How can you extract val to `x` in tuple `vt`","options":[{"text":"let x = vt.1","correct":false},{"text":"all of these answers","correct":true},{"text":"let x = vt.val","correct":false},{"text":"let (`_`, x) = vt","correct":false}],"illustrator":"```swift\nlet vt = (name: \"ABC\", val: 5)\n```"}]