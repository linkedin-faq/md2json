[{"question":" Given the string \"strawberries\" saved in a variable called fruit, what would `fruit.substring(2, 5)` return?","options":[{"text":"rawb","correct":false},{"text":"raw","correct":true},{"text":"awb","correct":false},{"text":"traw","correct":false}],"illustrator":""},{"question":" How can you achieve runtime polymorphism in Java?","options":[{"text":"method overloading","correct":false},{"text":"method overrunning","correct":false},{"text":"method overriding","correct":true},{"text":"method calling","correct":false}],"illustrator":""},{"question":" Given the following definitions, which of these expression will **NOT** evaluate to true?","options":[{"text":"`(i1 | i2) == 3`","correct":false},{"text":"`i2 && b1`","correct":true},{"text":"`b1 || !b2`","correct":false},{"text":"`(i1 ^ i2) < 4`","correct":false}],"illustrator":""},{"question":" What is the output of this code?","options":[{"text":"It will not compile because of line 4.","correct":true},{"text":"It will not compile because of line 3.","correct":false},{"text":"123","correct":false},{"text":"1234","correct":false}],"illustrator":"```java\n1: class Main {\n2:   public static void main (String[] args) {\n3:     int array[] = {1, 2, 3, 4};\n4:     for (int i = 0; i < array.size(); i++) {\n5:        System.out.print(array[i]);\n6:     }\n7:   }\n8: }\n```"},{"question":" Which of the following can replace the CODE SNIPPET to make the code below print \"Hello World\"?","options":[{"text":"`super1.print(); super2.print();`","correct":false},{"text":"`this.print();`","correct":false},{"text":"`super.print();`","correct":false},{"text":"`Interface1.print(); Interface2.print();`","correct":true}],"illustrator":"```java\ninterface Interface1 {\n    static void print() {\n        System.out.print(\"Hello\");\n    }\n}\ninterface Interface2 {\n    static void print() {\n        System.out.print(\"World!\");\n    }\n}\n```"},{"question":" What does the following code print?","options":[{"text":"CD","correct":false},{"text":"CDE","correct":false},{"text":"D","correct":false},{"text":"\"abcde\"","correct":true}],"illustrator":"```java\nString str = \"abcde\";\nstr.trim();\nstr.toUpperCase();\nstr.substring(3, 4);\nSystem.out.println(str);\n```"},{"question":" What is the result of this code?","options":[{"text":"It will show a stack trace with a runtime exception.","correct":false},{"text":"\"java.lang.Exception\"","correct":true},{"text":"It will run and throw an exception.","correct":false},{"text":"It will not compile.","correct":false}],"illustrator":"```java\nclass Main {\n    public static void main (String[] args){\n        System.out.println(print(1));\n    }\n    static Exception print(int i){\n        if (i>0) {\n            return new Exception();\n        } else {\n            throw new RuntimeException();\n        }\n    }\n}\n```"},{"question":" Which class can compile given these declarations?","options":[{"text":"A","correct":false},{"text":"B","correct":false},{"text":"C","correct":false},{"text":"D","correct":true}],"illustrator":"```java\nclass Three implements One, Two {\n    public void method() {\n        One.super.method();\n    }\n}\n```"},{"question":" What is the output of this code?","options":[{"text":"The code does not compile.","correct":false},{"text":"truefalse","correct":false},{"text":"truetrue","correct":true},{"text":"falsetrue","correct":false}],"illustrator":"```java\nclass Main {\n    public static void main (String[] args) {\n        List list = new ArrayList();\n        list.add(\"hello\");\n        list.add(2);\n        System.out.print(list.get(0) instanceof Object);\n        System.out.print(list.get(1) instanceof Integer);\n    }\n}\n```"},{"question":". Given the following two classes, what will be the output of the Main class?","options":[{"text":"Lines 1 and 2 generate compiler errors due to class name conflicts.","correct":false},{"text":"\"-123\"","correct":false},{"text":"It will throw an exception on line 5.","correct":false},{"text":"\"123\"","correct":true}],"illustrator":"```java\npackage mypackage;\npublic class Math {\n    public static int abs(int num){\n        return num < 0 ? -num : num;\n    }\n}\npackage mypackage.elementary;\npublic class Math {\n    public static int abs (int num) {\n        return -num;\n    }\n}\n```\n```java\nimport mypackage.Math;\nimport mypackage.elementary.*;\nclass Main {\n    public static void main (String args[]){\n        System.out.println(Math.abs(123));\n    }\n}\n```"},{"question":". What is the result of this code?","options":[{"text":"It will not compile because of line 10.","correct":true},{"text":"\"Hello!\"","correct":false},{"text":"It will not compile because of line 2.","correct":false},{"text":"\"World!\"","correct":false}],"illustrator":"```java\n1: class MainClass {\n2:  final String message(){\n3:      return \"Hello!\";\n4:  }\n5: }\n6: class Main extends MainClass {\n7:  public static void main(String[] args) {\n8:      System.out.println(message());\n9:  }\n10: String message(){\n11:     return \"World!\";\n12:  }\n13: }\n```"},{"question":". Given this code, which command will output \"2\"?","options":[{"text":"`java Main 1 2 \"3 4\" 5`","correct":false},{"text":"`java Main 1 \"2\" \"2\" 5`","correct":true},{"text":"`java Main.class 1 \"2\" 2 5`","correct":false},{"text":"`java Main 1 \"2\" \"3 4\" 5`","correct":false}],"illustrator":"```java\nclass Main {\n    public static void main(String[] args) {\n        System.out.println(args[2]);\n    }\n}\n```"},{"question":". What is the output of this code?","options":[{"text":"\"123451234512345\"","correct":false},{"text":"Nothing - this will not compile.","correct":true},{"text":"a negative integer value","correct":false},{"text":"\"12345100000\"","correct":false}],"illustrator":"```java\nclass Main {\n    public static void main(String[] args){\n        int a = 123451234512345;\n        System.out.println(a);\n    }\n}\n```"},{"question":". What is the output of this code?","options":[{"text":"The code does not compile.","correct":false},{"text":"A runtime exception is thrown.","correct":true},{"text":"\"world!!world\"","correct":false},{"text":"\"world!world!\"","correct":false}],"illustrator":"```java\nclass Main {\n    public static void main (String[] args) {\n        String message = \"Hello world!\";\n        String newMessage = message.substring(6, 12)\n            + message.substring(12, 6);\n        System.out.println(newMessage);\n    }\n}\n```"},{"question":". How do you write a foreach loop that will iterate over ArrayList\\<Pencil\\>pencilCase?","options":[{"text":"`for (Pencil pencil : pencilCase) {}`","correct":true},{"text":"`for (pencilCase.next()) {}`","correct":false},{"text":"`for (Pencil pencil : pencilCase.iterator()) {}`","correct":false},{"text":"`for (pencil in pencilCase) {}`","correct":false}],"illustrator":""},{"question":". What does this code print?","options":[{"text":"`0`","correct":false},{"text":"positive number","correct":false},{"text":"negative number","correct":true},{"text":"compilation error","correct":false}],"illustrator":"```java\nSystem.out.print(\"apple\".compareTo(\"banana\"));\n```"},{"question":". You have an ArrayList of names that you want to sort alphabetically. Which approach would **NOT** work?","options":[{"text":"`names.sort(Comparator.comparing(String::toString))`","correct":false},{"text":"`Collections.sort(names)`","correct":false},{"text":"`names.sort(List.DESCENDING)`","correct":true},{"text":"`names.stream().sorted((s1, s2) -> s1.compareTo(s2)).collect(Collectors.toList())`","correct":false}],"illustrator":""},{"question":". By implementing encapsulation, you cannot directly access the class's \\_ properties unless you are writing code inside the class itself.","options":[{"text":"private","correct":true},{"text":"protected","correct":false},{"text":"no-modifier","correct":false},{"text":"public","correct":false}],"illustrator":""},{"question":". Which is the most up-to-date way to instantiate the current date?","options":[{"text":"`new SimpleDateFormat(\"yyyy-MM-dd\").format(new Date())`","correct":false},{"text":"`new Date(System.currentTimeMillis())`","correct":false},{"text":"`LocalDate.now()`","correct":true},{"text":"`Calendar.getInstance().getTime()`","correct":false}],"illustrator":""},{"question":". Fill in the blank to create a piece of code that will tell whether `int0` is divisible by `5`:","options":[{"text":"`int0 / 5 ? true: false`","correct":false},{"text":"`int0 % 5 == 0`","correct":true},{"text":"`int0 % 5 != 5`","correct":false},{"text":"`Math.isDivisible(int0, 5)`","correct":false}],"illustrator":""},{"question":". How many times will this code print \"Hello World!\"?","options":[{"text":"10 times","correct":true},{"text":"9 times","correct":false},{"text":"5 times","correct":false},{"text":"infinite number of times","correct":false}],"illustrator":"```java\nclass Main {\n    public static void main(String[] args){\n        for (int i=0; i<10; i=i++){\n            i+=1;\n            System.out.println(\"Hello World!\");\n        }\n    }\n}\n```"},{"question":". The runtime system starts your program by calling which function first?","options":[{"text":"print","correct":false},{"text":"iterative","correct":false},{"text":"hello","correct":false},{"text":"main","correct":true}],"illustrator":""},{"question":". What code would you use in Constructor A to call Constructor B?","options":[{"text":"Jedi(name, species, false)","correct":false},{"text":"new Jedi(name, species, false)","correct":false},{"text":"this(name, species, false)","correct":true},{"text":"super(name, species, false)","correct":false}],"illustrator":"```java\npublic class Jedi {\n  /* Constructor A */\n  Jedi(String name, String species){}\n  /* Constructor B */\n  Jedi(String name, String species, boolean followsTheDarkSide){}\n  }\n```"},{"question":". Which statement is **NOT** true?","options":[{"text":"An anonymous class may specify an abstract base class as its base type.","correct":false},{"text":"An anonymous class does not require a zero-argument constructor.","correct":true},{"text":"An anonymous class may specify an interface as its base type.","correct":false},{"text":"An anonymous class may specify both an abstract class and interface as base types.","correct":false}],"illustrator":""},{"question":". What will this program print out to the console when executed?","options":[{"text":"[5, 1, 10]","correct":true},{"text":"[10, 5, 1]","correct":false},{"text":"[1, 5, 10]","correct":false},{"text":"[10, 1, 5]","correct":false}],"illustrator":"```java\nimport java.util.LinkedList;\npublic class Main {\n    public static void main(String[] args){\n        LinkedList<Integer> list = new LinkedList<>();\n        list.add(5);\n        list.add(1);\n        list.add(10);\n        System.out.println(list);\n    }\n}\n```"},{"question":". What is the output of this code?","options":[{"text":"\"Hello\"","correct":false},{"text":"A runtime exception is thrown.","correct":true},{"text":"The code does not compile.","correct":false},{"text":"\"ello\"","correct":false}],"illustrator":"```java\nclass Main {\n    public static void main(String[] args){\n       String message = \"Hello\";\n       for (int i = 0; i<message.length(); i++){\n          System.out.print(message.charAt(i+1));\n       }\n    }\n}\n```"},{"question":". Object-oriented programming is a style of programming where you organize your program around \\_ rather than \\_ and data rather than logic.","options":[{"text":"functions; actions","correct":false},{"text":"objects; actions","correct":true},{"text":"actions; functions","correct":false},{"text":"actions; objects","correct":false}],"illustrator":""},{"question":". What statement returns true if \"nifty\" is of type String?","options":[{"text":"`\"nifty\".getType().equals(\"String\")`","correct":false},{"text":"`\"nifty\".getType() == String`","correct":false},{"text":"`\"nifty\".getClass().getSimpleName() == \"String\"`","correct":false},{"text":"`\"nifty\" instanceof String`","correct":true}],"illustrator":""},{"question":". What is the output of this code?","options":[{"text":"A runtime exception is thrown.","correct":false},{"text":"3false","correct":false},{"text":"2true","correct":false},{"text":"3true","correct":true}],"illustrator":"```java\nimport java.util.*;\nclass Main {\n\tpublic static void main(String[] args) {\n\t\tList<Boolean> list = new ArrayList<>();\n\t\tlist.add(true);\n\t\tlist.add(Boolean.parseBoolean(\"FalSe\"));\n\t\tlist.add(Boolean.TRUE);\n\t\tSystem.out.print(list.size());\n\t\tSystem.out.print(list.get(1) instanceof Boolean);\n\t}\n}\n```"},{"question":". What is the result of this code?","options":[{"text":"It will not compile because of line 7.","correct":false},{"text":"Hello!Hello!","correct":false},{"text":"Hello!World!","correct":true},{"text":"It will not compile because of line 11.","correct":false}],"illustrator":"```java\n1: class Main {\n2: \tObject message(){\n3: \t\treturn \"Hello!\";\n4: \t}\n5: \tpublic static void main(String[] args) {\n6: \t\tSystem.out.print(new Main().message());\n7: \t\tSystem.out.print(new Main2().message());\n8: \t}\n9: }\n10: class Main2 extends Main {\n11: \tString message(){\n12: \t\treturn \"World!\";\n13: \t}\n14: }\n```"},{"question":". What method can be used to create a new instance of an object?","options":[{"text":"another instance","correct":false},{"text":"field","correct":false},{"text":"constructor","correct":true},{"text":"private method","correct":false}],"illustrator":""},{"question":". Which is the most reliable expression for testing whether the values of two string variables are the same?","options":[{"text":"string1 == string2","correct":false},{"text":"string1 = string2","correct":false},{"text":"string1.matches(string2)","correct":false},{"text":"string1.equals(string2)","correct":true}],"illustrator":""},{"question":". Which letters will print when this code is run?","options":[{"text":"A, B, and D","correct":false},{"text":"A, C, and D","correct":false},{"text":"C and D","correct":false},{"text":"A and D","correct":true}],"illustrator":"```java\npublic static void main(String[] args) {\n\ttry {\n\t\tSystem.out.println(\"A\");\n\t\tbadMethod();\n\t\tSystem.out.println(\"B\");\n\t} catch (Exception ex) {\n\t\tSystem.out.println(\"C\");\n\t} finally {\n\t\tSystem.out.println(\"D\");\n\t}\n}\npublic static void badMethod() {\n\tthrow new Error();\n}\n```"},{"question":". What is the output of this code?","options":[{"text":"It will throw a runtime exception.","correct":false},{"text":"It will not compile.","correct":false},{"text":"It will print \"Hello World!\" three times.","correct":true},{"text":"It will run forever.","correct":false}],"illustrator":"```java\nclass Main {\n\tstatic int count = 0;\n\tpublic static void main(String[] args) {\n\t\tif (count < 3) {\n\t\t\tcount++;\n\t\t\tmain(null);\n\t\t} else {\n\t\t\treturn;\n\t\t}\n\t\tSystem.out.println(\"Hello World!\");\n\t}\n}\n```"},{"question":". What is the output of this code?","options":[{"text":"`[abc, 0, 2, 10]`","correct":false},{"text":"The code does not compile.","correct":false},{"text":"`[abc, 2, 10, 0]`","correct":false},{"text":"`[0, 10, 2, abc]`","correct":true}],"illustrator":"```java\nimport java.util.*;\nclass Main {\n\tpublic static void main(String[] args) {\n\t\tString[] array = {\"abc\", \"2\", \"10\", \"0\"};\n\t\tList<String> list = Arrays.asList(array);\n\t\tCollections.sort(list);\n\t\tSystem.out.println(Arrays.toString(array));\n\t}\n}\n```"},{"question":". What is the output of this code?","options":[{"text":"Hello World!","correct":false},{"text":"HelloHelloWorld!","correct":true},{"text":"Hello Hello World!","correct":false},{"text":"Hello HelloWorld!","correct":false}],"illustrator":"```java\nclass Main {\n\tpublic static void main(String[] args) {\n\t\tString message = \"Hello\";\n\t\tprint(message);\n\t\tmessage += \"World!\";\n\t\tprint(message);\n\t}\n\tstatic void print(String message){\n\t\tSystem.out.print(message);\n\t\tmessage += \" \";\n\t}\n}\n```"},{"question":". What is displayed when this code is compiled and executed?","options":[{"text":"x","correct":false},{"text":"null","correct":false},{"text":"10","correct":true},{"text":"5","correct":false}],"illustrator":"```java\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tint x = 5;\n\t\tx = 10;\n\t\tSystem.out.println(x);\n\t}\n}\n```"},{"question":". Which approach cannot be used to iterate over a List named _theList_?","options":[{"text":"A","correct":false},{"text":"B","correct":false},{"text":"C","correct":true},{"text":"D","correct":false}],"illustrator":"```java\ntheList.forEach(System.out::println);\n```"},{"question":". What method signature will work with this code?","options":[{"text":"public void isHealthy(String avocado)","correct":false},{"text":"boolean isHealthy(String string)","correct":true},{"text":"public isHealthy(\"avocado\")","correct":false},{"text":"private String isHealthy(String food)","correct":false}],"illustrator":""},{"question":". Which are valid keywords in a Java module descriptor (module-info.java)?","options":[{"text":"provides, employs","correct":false},{"text":"imports, exports","correct":false},{"text":"consumes, supplies","correct":false},{"text":"requires, exports","correct":true}],"illustrator":""},{"question":". Which type of variable keeps a constant value once it is assigned?","options":[{"text":"non-static","correct":false},{"text":"static","correct":false},{"text":"final","correct":true},{"text":"private","correct":false}],"illustrator":""},{"question":". How does the keyword `volatile` affect how a variable is handled?","options":[{"text":"It will be read by only one thread at a time.","correct":false},{"text":"It will be stored on the hard drive.","correct":false},{"text":"It will never be cached by the CPU.","correct":true},{"text":"It will be preferentially garbage collected.","correct":false}],"illustrator":""},{"question":". What is the result of this code?","options":[{"text":"an alphanumeric character","correct":false},{"text":"a negative number","correct":false},{"text":"a positive number","correct":true},{"text":"a ClassCastException","correct":false}],"illustrator":"```java\nchar smooch = 'x';\nSystem.out.println((int) smooch);\n```"},{"question":". You get a NullPointerException. What is the most likely cause?","options":[{"text":"A file that needs to be opened cannot be found.","correct":false},{"text":"A network connection has been lost in the middle of communications.","correct":false},{"text":"Your code has used up all available memory.","correct":false},{"text":"The object you are using has not been instantiated.","correct":true}],"illustrator":""},{"question":". How would you fix this code so that it compiles?","options":[{"text":"Make age static.","correct":true},{"text":"Make age global.","correct":false},{"text":"Make age public.","correct":false},{"text":"Initialize age to a number.","correct":false}],"illustrator":"```java\npublic class Nosey {\n\tint age;\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(\"Your age is: \" + age);\n\t}\n}\n```"},{"question":". Add a Duck called \"Waddles\" to the ArrayList **ducks**.","options":[{"text":"`Duck waddles = new Duck();`","correct":false},{"text":"`Duck duck = new Duck(\"Waddles\");`","correct":false},{"text":"`ducks.add(new Duck(\"Waddles\"));`","correct":true},{"text":"`ducks.add(new Waddles());`","correct":false}],"illustrator":"```java\npublic class Duck {\n\tprivate String name;\n\tDuck(String name) {}\n}\n```"},{"question":". If you encounter `UnsupportedClassVersionError` it means the code was `___` on a newer version of Java than the JRE `___` it.","options":[{"text":"executed; interpreting","correct":false},{"text":"executed; compiling","correct":false},{"text":"compiled; executing","correct":true},{"text":"compiled, translating","correct":false}],"illustrator":""},{"question":". Given this class, how would you make the code compile?","options":[{"text":"A","correct":false},{"text":"B","correct":false},{"text":"C","correct":true},{"text":"D","correct":false}],"illustrator":"```java\nprivate void setX(int x) {\n    this.x = x;\n}\npublic TheClass() {\n    setX(77);\n}\n```"},{"question":". How many times f will be printed?","options":[{"text":"4","correct":true},{"text":"3","correct":false},{"text":"5","correct":false},{"text":"A Runtime exception will be thrown","correct":false}],"illustrator":"```java\npublic class Solution {\n    public static void main(String[] args) {\n        for (int i = 44; i > 40; i--) {\n            System.out.println(\"f\");\n        }\n    }\n}\n```"},{"question":". Which statements about `abstract` classes are true?","options":[{"text":"1, 2, and 3","correct":false},{"text":"only 3","correct":false},{"text":"2 and 3","correct":true},{"text":"only 2","correct":false}],"illustrator":"```\n1. They can be instantiated.\n2. They allow member variables and methods to be inherited by subclasses.\n3. They can contain constructors.\n```"},{"question":". Which keyword lets you call the constructor of a parent class?","options":[{"text":"parent","correct":false},{"text":"super","correct":true},{"text":"this","correct":false},{"text":"new","correct":false}],"illustrator":""},{"question":". What is the result of this code?","options":[{"text":"It will throw an ArithmeticException.","correct":true},{"text":"It will run and output 0.","correct":false},{"text":"It will not compile because of line 3.","correct":false},{"text":"It will run and output infinity.","correct":false}],"illustrator":"```java\n  1: int a = 1;\n  2: int b = 0;\n  3: int c = a/b;\n  4: System.out.println(c);\n```"},{"question":". Normally, to access a static member of a class such as Math.PI, you would need to specify the class \"Math\". What would be the best way to allow you to use simply \"PI\" in your code?","options":[{"text":"Add a static import.","correct":true},{"text":"Declare local copies of the constant in your code.","correct":false},{"text":"This cannot be done. You must always qualify references to static members with the class form which they came from.","correct":false},{"text":"Put the static members in an interface and inherit from that interface.","correct":false}],"illustrator":""},{"question":". Which keyword lets you use an interface?","options":[{"text":"extends","correct":false},{"text":"implements","correct":true},{"text":"inherits","correct":false},{"text":"import","correct":false}],"illustrator":""},{"question":". Why are ArrayLists better than arrays?","options":[{"text":"You don't have to decide the size of an ArrayList when you first make it.","correct":true},{"text":"You can put more items into an ArrayList than into an array.","correct":false},{"text":"ArrayLists can hold more kinds of objects than arrays.","correct":false},{"text":"You don't have to decide the type of an ArrayList when you first make it.","correct":false}],"illustrator":""},{"question":". Declare a variable that holds the first four digits of Π","options":[{"text":"int pi = 3.141;","correct":false},{"text":"decimal pi = 3.141;","correct":false},{"text":"double pi = 3.141;","correct":true},{"text":"float pi = 3.141;","correct":false}],"illustrator":"```java\npublic class TestReal {\n    public static void main (String[] argv)\n    {\n      double pi = 3.14159265;       //accuracy up to 15 digits\n      float pi2 = 3.141F;           //accuracy up to 6-7 digits\n      System.out.println (\"Pi=\" + pi);\n      System.out.println (\"Pi2=\" + pi2);\n    }\n  }\n```\n```\nThe default Java type which Java will be using for a float variable will be double.\nSo, even if you declare any variable as float, what the compiler has to actually do is to assign a double value to a float variable,\nwhich is not possible. So, to tell the compiler to treat this value as a float, that 'F' is used.\n```"},{"question":". Use the magic power to cast a spell","options":[{"text":"`new MagicPower().castSpell(\"expecto patronum\")`","correct":true},{"text":"`MagicPower magicPower = new MagicPower();`","correct":false},{"text":"`MagicPower.castSpell(\"expelliarmus\");`","correct":false},{"text":"`new MagicPower.castSpell();`","correct":false}],"illustrator":"```java\npublic class MagicPower {\n    void castSpell(String spell) {}\n}\n```"},{"question":". What language construct serves as a blueprint containing an object's properties and functionality?","options":[{"text":"constructor","correct":false},{"text":"instance","correct":false},{"text":"class","correct":true},{"text":"method","correct":false}],"illustrator":""},{"question":". What does this code print?","options":[{"text":"10 10","correct":false},{"text":"5 10","correct":true},{"text":"10 5","correct":false},{"text":"5 5","correct":false}],"illustrator":"```java\npublic static void main(String[] args) {\n    int x=5,y=10;\n    swapsies(x,y);\n    System.out.println(x+\" \"+y);\n}\nstatic void swapsies(int a, int b) {\n    int temp=a;\n    a=b;\n    b=temp;\n}\n```"},{"question":". What is the result of this code?","options":[{"text":"Hello World","correct":false},{"text":"It will not compile because the second catch statement is unreachable","correct":true},{"text":"Hello World!","correct":false},{"text":"It will throw runtime exception","correct":false}],"illustrator":"```java\ntry {\n    System.out.println(\"Hello World\");\n} catch (Exception e) {\n    System.out.println(\"e\");\n} catch (ArithmeticException e) {\n    System.out.println(\"e\");\n} finally {\n    System.out.println(\"!\");\n}\n```"},{"question":". Which is not a java keyword","options":[{"text":"finally","correct":false},{"text":"native","correct":false},{"text":"interface","correct":false},{"text":"unsigned","correct":true}],"illustrator":""},{"question":". Which operator would you use to find the remainder after division?","options":[{"text":"`%`","correct":true},{"text":"`//`","correct":false},{"text":"`/`","correct":false},{"text":"`DIV`","correct":false}],"illustrator":""},{"question":". Which choice is a disadvantage of inheritance?","options":[{"text":"Overridden methods of the parent class cannot be reused.","correct":false},{"text":"Responsibilities are not evenly distributed between parent and child classes.","correct":false},{"text":"Classes related by inheritance are tightly coupled to each other.","correct":true},{"text":"The internal state of the parent class is accessible to its children.","correct":false}],"illustrator":""},{"question":". Declare and initialize an array of 10 ints.","options":[{"text":"`Array<Integer> numbers = new Array<Integer>(10);`","correct":false},{"text":"`Array[int] numbers = new Array[int](10);`","correct":false},{"text":"`int[] numbers = new int[10];`","correct":true},{"text":"`int numbers[] = int[10];`","correct":false}],"illustrator":""},{"question":". Refactor this event handler to a lambda expression:","options":[{"text":"`groucyButton.addActionListener(ActionListener listener -> System.out.println(\"Press me one more time...\"));`","correct":false},{"text":"`groucyButton.addActionListener((event) -> System.out.println(\"Press me one more time...\"));`","correct":true},{"text":"`groucyButton.addActionListener(new ActionListener(ActionEvent e) {() -> System.out.println(\"Press me one more time...\");});`","correct":false},{"text":"`groucyButton.addActionListener(() -> System.out.println(\"Press me one more time...\"));`","correct":false}],"illustrator":"```java\ngroucyButton.addActionListener(new ActionListener() {\n    @Override\n    public void actionPerformed(ActionEvent e) {\n        System.out.println(\"Press me one more time..\");\n    }\n});\n```"},{"question":". Which functional interfaces does Java provide to serve as data types for lambda expressions?","options":[{"text":"Observer, Observable","correct":false},{"text":"Collector, Builder","correct":false},{"text":"Filter, Map, Reduce","correct":false},{"text":"Consumer, Predicate, Supplier","correct":true}],"illustrator":""},{"question":". What is a valid use of the hashCode() method?","options":[{"text":"encrypting user passwords","correct":false},{"text":"deciding if two instances of a class are equal","correct":true},{"text":"enabling HashMap to find matches faster","correct":false},{"text":"moving objects from a List to a HashMap","correct":false}],"illustrator":""},{"question":". What kind of relationship does \"extends\" denote?","options":[{"text":"uses-a","correct":false},{"text":"is-a","correct":true},{"text":"has-a","correct":false},{"text":"was-a","correct":false}],"illustrator":""},{"question":". How do you force an object to be garbage collected?","options":[{"text":"Set object to null and call Runtime.gc()","correct":false},{"text":"Set object to null and call System.gc()","correct":true},{"text":"Set object to null and call Runtime.getRuntime().runFinalization()","correct":false},{"text":"There is no way to force an object to be garbage collected","correct":false}],"illustrator":""},{"question":". Java programmers commonly use design patterns. Some examples are the **\\_**, which helps create instances of a class, the **\\_**, which ensures that only one instance of a class can be created; and the **\\_**, which allows for a group of algorithms to be interchangeable.","options":[{"text":"static factory method; singleton; strategy pattern","correct":true},{"text":"strategy pattern; static factory method; singleton","correct":false},{"text":"creation pattern; singleton; prototype pattern","correct":false},{"text":"singleton; strategy pattern; static factory method","correct":false}],"illustrator":""},{"question":". Using Java's Reflection API, you can use \\_ to get the name of a class and \\_ to retrieve an array of its methods.","options":[{"text":"this.getClass().getSimpleName(); this.getClass().getDeclaredMethods()","correct":true},{"text":"this.getName(); this.getMethods()","correct":false},{"text":"Reflection.getName(this); Reflection.getMethods(this)","correct":false},{"text":"Reflection.getClass(this).getName(); Reflection.getClass(this).getMethods()","correct":false}],"illustrator":""},{"question":". Which is not a valid lambda expression?","options":[{"text":"`a -> false;`","correct":false},{"text":"`(a) -> false;`","correct":false},{"text":"`String a -> false;`","correct":true},{"text":"`(String a) -> false;`","correct":false}],"illustrator":""},{"question":". Which access modifier makes variables and methods visible only in the class where they are declared?","options":[{"text":"public","correct":false},{"text":"protected","correct":false},{"text":"nonmodifier","correct":false},{"text":"private","correct":true}],"illustrator":""},{"question":". What type of variable can be assigned to only once?","options":[{"text":"private","correct":false},{"text":"non-static","correct":false},{"text":"final","correct":true},{"text":"static","correct":false}],"illustrator":""},{"question":". How would you convert a String to an Int?","options":[{"text":"`\"21\".intValue()`","correct":false},{"text":"`String.toInt(\"21\")`","correct":false},{"text":"`Integer.parseInt(\"21\")`","correct":true},{"text":"`String.valueOf(\"21\")`","correct":false}],"illustrator":""},{"question":". What method should be added to the Duck class to print the name Moby?","options":[{"text":"`public String toString() { return name; } `","correct":true},{"text":"`public void println() { System.out.println(name); } `","correct":false},{"text":"`String toString() { return this.name; } `","correct":false},{"text":"`public void toString() { System.out.println(this.name); } `","correct":false}],"illustrator":"```java\npublic class Duck {\n    private String name;\n    Duck(String name) {\n        this.name = name;\n    }\n    public static void main(String[] args) {\n        System.out.println(new Duck(\"Moby\"));\n    }\n}\n```"},{"question":". Which operator is used to concatenate Strings in Java","options":[{"text":"`+`","correct":true},{"text":"`&`","correct":false},{"text":"`.`","correct":false},{"text":"`-`","correct":false}],"illustrator":""},{"question":". How many times does this loop print \"exterminate\"?","options":[{"text":"two","correct":false},{"text":"four","correct":true},{"text":"three","correct":false},{"text":"five","correct":false}],"illustrator":"```java\nfor (int i = 44; i > 40; i--) {\n    System.out.println(\"exterminate\");\n}\n```"},{"question":". What is the value of myCharacter after line 3 is run?","options":[{"text":"p","correct":false},{"text":"r","correct":false},{"text":"e","correct":true},{"text":"i","correct":false}],"illustrator":"```java\n1: public class Main {\n2:   public static void main (String[] args) {\n3:     char myCharacter = \"piper\".charAt(3);\n4:   }\n5: }\n```"},{"question":". When should you use a static method?","options":[{"text":"when your method is related to the object's characteristics","correct":false},{"text":"when you want your method to be available independently of class instances","correct":true},{"text":"when your method uses an object's instance variable","correct":false},{"text":"when your method is dependent on the specific instance that calls it","correct":false}],"illustrator":""},{"question":". What phrase indicates that a function receives a copy of each argument passed to it rather than a reference to the objects themselves?","options":[{"text":"pass by reference","correct":false},{"text":"pass by occurrence","correct":false},{"text":"pass by value","correct":true},{"text":"API call","correct":false}],"illustrator":""},{"question":". In Java, what is the scope of a method's argument or parameter?","options":[{"text":"inside the method","correct":true},{"text":"both inside and outside the method","correct":false},{"text":"neither inside nor outside the method","correct":false},{"text":"outside the method","correct":false}],"illustrator":""},{"question":". What is the output of this code?","options":[{"text":"5","correct":false},{"text":"8","correct":false},{"text":"1","correct":false},{"text":"3","correct":true}],"illustrator":"```java\npublic class Main {\n  public static void main (String[] args) {\n    int[] sampleNumbers = {8, 5, 3, 1};\n    System.out.println(sampleNumbers[2]);\n  }\n}\n```"},{"question":". Which change will make this code compile successfully?","options":[{"text":"Change line 2 to `public static final String message`","correct":false},{"text":"Change line 6 to `public void print2(){}`","correct":false},{"text":"Remove the body of the `print2` method and add a semicolon.","correct":false},{"text":"Remove the body of the `print` method.","correct":true}],"illustrator":"```java\n1: public class Main {\n2:   String MESSAGE =\"Hello!\";\n3:   static void print(){\n4:     System.out.println(message);\n5:   }\n6:   void print2(){}\n7: }\n```"},{"question":". What is the output of this code?","options":[{"text":"falsefalse","correct":false},{"text":"truetrue","correct":true},{"text":"falsetrue","correct":false},{"text":"truefalse","correct":false}],"illustrator":"```java\nimport java.util.*;\nclass Main {\n  public static void main(String[] args) {\n    String[] array = new String[]{\"A\", \"B\", \"C\"};\n    List<String> list1 = Arrays.asList(array);\n    List<String> list2 = new ArrayList<>(Arrays.asList(array));\n    List<String> list3 = new ArrayList<>(Arrays.asList(\"A\", new String(\"B\"), \"C\"));\n    System.out.print(list1.equals(list2));\n    System.out.print(list1.equals(list3));\n  }\n}\n```"},{"question":". Which code snippet is valid?","options":[{"text":"`ArrayList<String> words = new ArrayList<String>(){\"Hello\", \"World\"};`","correct":false},{"text":"`ArrayList words = Arrays.asList(\"Hello\", \"World\");`","correct":false},{"text":"`ArrayList<String> words = {\"Hello\", \"World\"};`","correct":false},{"text":"`ArrayList<String> words = new ArrayList<>(Arrays.asList(\"Hello\", \"World\"));`","correct":true}],"illustrator":""},{"question":". What is the output of this code?","options":[{"text":"A runtime exception is thrown.","correct":true},{"text":"\"HelloWorld!\"","correct":false},{"text":"\"hello\"","correct":false},{"text":"????","correct":false}],"illustrator":"```java\nclass Main {\n  public static void main(String[] args) {\n    StringBuilder sb = new StringBuilder(\"hello\");\n    sb.deleteCharAt(0).insert(0, \"H\").\" World!\";\n    System.out.println(sb);\n  }\n}\n```"},{"question":". How would you use the TaxCalculator to determine the amount of tax on $50?","options":[{"text":"TaxCalculator.calculate(50);","correct":true},{"text":"new TaxCalculator.calculate(50);","correct":false},{"text":"calculate(50);","correct":false},{"text":"new TaxCalculator.calculate($50);","correct":false}],"illustrator":"```java\nclass TaxCalculator {\n  static calculate(total) {\n    return total * .05;\n  }\n}\n```"},{"question":". Which characteristic does not apply to instances of java.util.HashSet=","options":[{"text":"uses hashcode of objects when inserted","correct":false},{"text":"contains unordred elements","correct":false},{"text":"contains unique elements","correct":false},{"text":"contains sorted elements","correct":true}],"illustrator":""},{"question":". What is the output?","options":[{"text":"1 3 2 4","correct":false},{"text":"4 2 3 1","correct":false},{"text":"1 2 3 4","correct":true},{"text":"4 3 2 1","correct":false}],"illustrator":"```java\nimport java.util.*;\npublic class Main {\n\tpublic static void main(String[] args)\n\t{\n\t\tPriorityQueue<Integer> queue = new PriorityQueue<>();\n\t\tqueue.add(4);\n\t\tqueue.add(3);\n\t\tqueue.add(2);\n\t\tqueue.add(1);\n\t\twhile (queue.isEmpty() == false) {\n\t\t\tSystem.out.printf(\"%d\", queue.remove());\n\t\t}\n\t}\n}\n```"},{"question":". What will this code print, assuming it is inside the main method of a class?","options":[{"text":"my","correct":false},{"text":"hellomyfriends","correct":false},{"text":"hello","correct":true},{"text":"friends","correct":false}],"illustrator":""},{"question":". You have an instance of type Map<String, Integer> named instruments containing the following key-value pairs: guitar=1200, cello=3000, and drum=2000. If you add the new key-value pair cello=4500 to the Map using the put method, how many elements do you have in the Map when you call instruments.size()?","options":[{"text":"2","correct":false},{"text":"When calling the put method, Java will throw an exception","correct":false},{"text":"4","correct":false},{"text":"3","correct":true}],"illustrator":""},{"question":". Which class acts as root class for Java Exception hierarchy?","options":[{"text":"Clonable","correct":false},{"text":"Throwable","correct":true},{"text":"Object","correct":false},{"text":"Serializable","correct":false}],"illustrator":""},{"question":". Which class does not implement the java.util.Collection interface?","options":[{"text":"java.util.Vector","correct":false},{"text":"java.util.ArrayList","correct":false},{"text":"java.util.HashSet","correct":false},{"text":"java.util.HashMap","correct":true}],"illustrator":""},{"question":". You have a variable of named `employees` of type `List<Employee>` containing multiple entries. The `Employee` type has a method `getName()` that returns te employee name. Which statement properly extracts a list of employee names?","options":[{"text":"`employees.collect(employee -> employee.getName());`","correct":false},{"text":"`employees.filter(Employee::getName).collect(Collectors.toUnmodifiableList());`","correct":false},{"text":"`employees.stream().map(Employee::getName).collect(Collectors.toList());`","correct":true},{"text":"`employees.stream().collect((e) -> e.getName());`","correct":false}],"illustrator":""},{"question":". This code does not compile. What needs to be changed so that it does?","options":[{"text":"Add a constructor that accepts a `String` parameter and assigns it to the field `shortCode`.","correct":true},{"text":"Remove the `final` keyword for the field `shortCode`.","correct":false},{"text":"All enums need to be defined on a single line of code.","correct":false},{"text":"Add a setter method for the field `shortCode`.","correct":false}],"illustrator":"```\npublic enum Direction {\n    EAST(\"E\"),\n    WEST(\"W\"),\n    NORTH(\"N\"),\n    SOUTH(\"S\");\n    private final String shortCode;\n    public String getShortCode() {\n        return shortCode;\n    }\n}\n```"},{"question":". Which language feature ensures that objects implementing the `AutoCloseable` interface are closed when it completes?","options":[{"text":"try-catch-finally","correct":false},{"text":"try-finally-close","correct":false},{"text":"try-with-resources","correct":true},{"text":"try-catch-close","correct":false}],"illustrator":""},{"question":". What code should go in line 3?","options":[{"text":"`int[][] array = new int[][];`","correct":false},{"text":"`int[][] array = new int[3][3];`","correct":true},{"text":"`int[][] array = new int[2][2];`","correct":false},{"text":"`int[][] array = [][];`","correct":false}],"illustrator":"```java\nclass Main {\n    public static void main(String[] args) {\n        array[0] = new int[]{1, 2, 3};\n        array[1] = new int[]{4, 5, 6};\n        array[2] = new int[]{7, 8, 9};\n        for (int i = 0; i < 3; i++)\n            System.out.print(array[i][1]); //prints 258\n    }\n}\n```"},{"question":". Is this an example of method overloading or overriding?","options":[{"text":"neither","correct":false},{"text":"both","correct":true},{"text":"overloading","correct":false},{"text":"overriding","correct":false}],"illustrator":"```java\nclass Car {\n    public void accelerate() {}\n}\nclass Lambo extends Car {\n    public void accelerate(int speedLimit) {}\n    public void accelerate() {}\n}\n```"},{"question":"0. Which choice is the best data type for working with money in Java?","options":[{"text":"float","correct":false},{"text":"String","correct":false},{"text":"double","correct":false},{"text":"BigDecimal","correct":true}],"illustrator":""},{"question":"1. Which statement about constructors is not ture?","options":[{"text":"A class can have multiple constructors with a different parameter list.","correct":false},{"text":"You can call another constructor with `this` or `super`.","correct":false},{"text":"A constructor does not define a return value.","correct":false},{"text":"Every class must explicitly define a constructor without parameters.","correct":true}],"illustrator":""},{"question":"2. What language feature allows types to be parameters on classes, interfaces, and methods in order to reuse the same code for different data types?","options":[{"text":"Regular Expressions","correct":false},{"text":"Reflection","correct":false},{"text":"Generics","correct":true},{"text":"Concurrency","correct":false}],"illustrator":""},{"question":"3. What will be printed?","options":[{"text":"raspberry","correct":false},{"text":"strawberry","correct":true},{"text":"blueberry","correct":false},{"text":"rasp","correct":false}],"illustrator":"```java\npublic class Berries{\n    String berry = \"blue\";\n    public static void main( String[] args ) {\n        new Berries().juicy( \"straw\" );\n    }\n    void juicy(String berry){\n        this.berry = \"rasp\";\n        System.out.println(berry + \"berry\");\n    }\n}\n```"},{"question":"4. What is the value of `forestCount` after this code executes?","options":[{"text":"3","correct":true},{"text":"4","correct":false},{"text":"2","correct":false},{"text":"When calling the put method, Java will throw an exception","correct":false}],"illustrator":"```java\nMap<String, Integer> forestSpecies = new HashMap<>();\nforestSpecies.put(\"Amazon\", 30000);\nforestSpecies.put(\"Congo\", 10000);\nforestSpecies.put(\"Daintree\", 15000);\nforestSpecies.put(\"Amazon\", 40000);\nint forestCount = forestSpecies.size();\n```"},{"question":"5. What is a problem with this code?","options":[{"text":"String should be compared using == method instead of equals.","correct":false},{"text":"Modifying a collection while iterating through it can throw a ConcurrentModificationException.","correct":true},{"text":"The List interface does not allow an argument of type String to be passed to the remove method.","correct":false},{"text":"ArrayList does not implement the List interface.","correct":false}],"illustrator":"```java\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nclass Main {\n    public static void main( String[] args ) {\n        List<String> list = new ArrayList<String>( Arrays.asList( \"a\", \"b\", \"c\" ) );\n        for( String value :list ){\n            if( value.equals( \"a\" ) ) {\n                list.remove( value );\n            }\n        }\n        System.out.println(list); // outputs [b,c]\n    }\n}\n```"},{"question":"6. How do you convert this method into a lambda expression?","options":[{"text":"`Function<Integer, Integer> squareLambda = (int x) -> { x * x };`","correct":false},{"text":"`Function<Integer, Integer> squareLambda = () -> { return x * x };`","correct":false},{"text":"`Function<Integer, Integer> squareLambda = x -> x * x;`","correct":true},{"text":"`Function<Integer, Integer> squareLambda = x -> return x * x;`","correct":false}],"illustrator":"```java\npublic int square(int x){\n    return x * x;\n}\n```"},{"question":"7. Which choice is a valid implementation of this interface?","options":[{"text":"A","correct":false},{"text":"B","correct":false},{"text":"C","correct":true},{"text":"D","correct":false}],"illustrator":"```java\npublic class MyClass implements MyInterface {\n    // ....\n    public int foo(){\n        return 100;\n    }\n}\n```"},{"question":"8. What is the result of this program?","options":[{"text":"10","correct":false},{"text":"20","correct":false},{"text":"null","correct":false},{"text":"An error will occur when compiling.","correct":true}],"illustrator":"```java\ninterface Foo{\n    int x = 10;\n}\npublic class Main{\n    public static void main( String[] args ) {\n        Foo.x = 20;\n        System.out.println(Foo.x);\n    }\n}\n```"},{"question":"9. Which statement must be inserted on line 1 to print the value true?","options":[{"text":"`Integer val = 15;`","correct":false},{"text":"`String val = \"Sam\";`","correct":true},{"text":"`String val = null;`","correct":false},{"text":"`Optional<String> val = Optional.empty();`","correct":false}],"illustrator":"```\n1:\n2: Optional<String> opt = Optional.of(val);\n3: System.out.println(opt.isPresent());\n```"},{"question":"0. What will this code print, assuming it is inside the main method of a class?","options":[{"text":"false </br> true","correct":false},{"text":"true </br> true","correct":false},{"text":"true </br> false","correct":true},{"text":"false </br> false","correct":false}],"illustrator":"```java\nSystem.out.println(true && false || true);\nSystem.out.println(false || false && true);\n```"},{"question":"1. What will this code print?","options":[{"text":"`[Two]`","correct":false},{"text":"`[One, Two, Three]`","correct":true},{"text":"`[One, Three]`","correct":false},{"text":"`Two`","correct":false}],"illustrator":"```java\nList<String> list1 = new ArrayList<>();\nlist1.add( \"One\" );\nlist1.add( \"Two\" );\nlist1.add( \"Three\" );\nList<String> list2 = new ArrayList<>();\nlist2.add( \"Two\" );\nlist1.remove( list2 );\nSystem.out.println(list1);\n```"},{"question":"2. Which code checks whether the characters in two Strings,named `time` and `money`, are the same?","options":[{"text":"`if(time <> money){}`","correct":false},{"text":"`if(time.equals(money)){}`","correct":true},{"text":"`if(time == money){}`","correct":false},{"text":"`if(time = money){}`","correct":false}],"illustrator":""},{"question":"3. An **\\_** is a serious issue thrown by the JVM that the JVM is unlikely to recover from. An **\\_** is an unexpected event that an application may be able to deal with in order to continue execution.","options":[{"text":"exception,assertion","correct":false},{"text":"AbnormalException, AccidentalException","correct":false},{"text":"error, exception","correct":true},{"text":"exception, error","correct":false}],"illustrator":""},{"question":"4. Which keyword would not be allowed here?","options":[{"text":"static","correct":true},{"text":"protected","correct":false},{"text":"public","correct":false},{"text":"void","correct":false}],"illustrator":"```java\nclass Unicorn {\n    _____ Unicorn(){}\n}\n```"},{"question":"5. Which OOP concept is this code an example of?","options":[{"text":"composition","correct":false},{"text":"generics","correct":false},{"text":"polymorphism","correct":true},{"text":"encapsulation","correct":false}],"illustrator":"```java\nList[] myLists = {\n    new ArrayList<>(),\n    new LinkedList<>(),\n    new Stack<>(),\n    new Vector<>(),\n};\nfor (List list : myLists){\n    list.clear();\n}\n```"},{"question":"6. What does this code print?","options":[{"text":"true; false","correct":false},{"text":"false; false","correct":true},{"text":"false; true","correct":false},{"text":"true; true","correct":false}],"illustrator":"```java\nString a = \"bikini\";\nString b = new String(\"bikini\");\nString c = new String(\"bikini\");\nSystem.out.println(a == b);\nSystem.out.println(b == c);\n```"},{"question":"7. What keyword is added to a method declaration to ensure that two threads do not simultaneously execute it on the same object instance?","options":[{"text":"native","correct":false},{"text":"volatile","correct":false},{"text":"synchronized","correct":true},{"text":"lock","correct":false}],"illustrator":""},{"question":"8. Which is a valid type for this lambda function?","options":[{"text":"`Function<Integer, Boolean>`","correct":false},{"text":"`Function<String>`","correct":false},{"text":"`Function<Integer, String>`","correct":true},{"text":"`Function<Integer>`","correct":false}],"illustrator":"```java\n_____ oddOrEven = x -> {\n    return x % 2 == 0 ? \"even\" : \"odd\";\n};\n```"},{"question":"9. What is displayed when this code is compiled and executed?","options":[{"text":"6","correct":false},{"text":"3","correct":false},{"text":"4","correct":false},{"text":"7","correct":true}],"illustrator":"```java\nimport java.util.HashMap;\npublic class Main {\n    public static void main(String[] args) {\n        HashMap<String, Integer> pantry = new HashMap<>();\n        pantry.put(\"Apples\", 3);\n        pantry.put(\"Oranges\", 2);\n        int currentApples = pantry.get(\"Apples\");\n        pantry.put(\"Apples\", currentApples + 4);\n        System.out.println(pantry.get(\"Apples\"));\n    }\n}\n```"},{"question":"0. What variable type should be declared for capitalize?","options":[{"text":"`Function<String, String>`","correct":true},{"text":"`Stream<String>`","correct":false},{"text":"`String<String, String>`","correct":false},{"text":"`Map<String, String>`","correct":false}],"illustrator":"```shell\nList<String> songTitles = Arrays.asList(\"humble\", \"element\", \"dna\");\n_______ capitalize = (str) -> str.toUpperCase();\nsongTitles.stream().map(capitalize).forEach(System.out::println);\n```"},{"question":"1. Which is the correct return type for the processFunction method?","options":[{"text":"`Integer`","correct":false},{"text":"`String`","correct":true},{"text":"`Consumer`","correct":false},{"text":"`Function<Integer, String>`","correct":false}],"illustrator":"```java\n_____ processFunction(Integer number, Function<Integer, String> lambda) {\n        return lambda.apply(number);\n    }\n```"},{"question":"2. What function could you use to replace slashes for dashes in a list of dates?","options":[{"text":"`UnaryOperator<String> replaceSlashes = date -> date.replace(\"/\", \"-\");`","correct":true},{"text":"`Function<String, String> replaceSlashes = dates -> dates.replace(\"-\", \"/\");`","correct":false},{"text":"`Map<String, String> replaceSlashes = dates.replace(\"/\", \"-\");`","correct":false},{"text":"`Consumer<Date> replaceSlashes = date -> date.replace(\"/\", \"-\");`","correct":false}],"illustrator":"```java\nList<String> dates = new ArrayList<String>();\n// missing code\ndates.replaceAll(replaceSlashes);\n```"},{"question":"3. From which class do all other classes implicitly extend?","options":[{"text":"`Object`","correct":true},{"text":"`Main`","correct":false},{"text":"`Java`","correct":false},{"text":"`Class`","correct":false}],"illustrator":""},{"question":"4. How do you create and run a Thread for this class?","options":[{"text":"`Thread thread = new Thread(new CurrentDateRunnable()); thread.start();`","correct":true},{"text":"`new Thread(new CurrentDateRunnable()).join();`","correct":false},{"text":"`new CurrentDateRunnable().run();`","correct":false},{"text":"`new CurrentDateRunnable().start();`","correct":false}],"illustrator":"```java\nimport java.util.date;\npublic class CurrentDateRunnable implements Runnable {\n    @Override\n    public void run () {\n        while (true) {\n            System.out.println(\"Current date: \" + new Date());\n            try {\n                Thread.sleep(5000);\n            } catch (InterruptedException e) {\n                throw new RuntimeException(e);\n            }\n        }\n    }\n}\n```"},{"question":"5. Which expression is a functional equivalent?","options":[{"text":"A","correct":false},{"text":"B","correct":false},{"text":"C","correct":false},{"text":"D","correct":true}],"illustrator":"```java\nint total = numbers.stream()\n                        .filter(x -> x % 2 == 0)\n                        .mapToInt(x -> x * x)\n                        .sum();\n```\n```\nnumbers                         // Input `List<Integer>` > [1, 2, 3, 4] <br>\n    .stream()                   // Converts input into `Stream<Integer>` <br>\n    .filter(x -> x % 2 == 0)    // Filter even numbers and return `Stream<Integer>` > [2, 4] <br>\n    .mapToInt(x -> x * x)       // Square the number, converts `Integer` to an `int`, and returns `IntStream` > [4, 16] <br>\n    .sum()                      // Returns the sum as `int` > 20\n```"},{"question":"6. Which is not one of the standard input/output streams provided by java.lang.System?","options":[{"text":" print","correct":true},{"text":" out","correct":false},{"text":" err","correct":false},{"text":" in","correct":false}],"illustrator":""},{"question":"7. The compiler is complaining about this assignment of the variable pickle to the variable jar. How woulld you fix this?","options":[{"text":"Use the method toInt() to convert pickle before assigning it to jar.","correct":false},{"text":"Cast pickle to an int before assigning it to jar.","correct":true},{"text":"Make pickle into a double by adding + \".0\"","correct":false},{"text":"Use the new keyword to create a new Integer from pickle before assigning it to jar.","correct":false}],"illustrator":"```java\ndouble pickle = 2;\nint jar = pickle;\n```"},{"question":"8. What value should x have to make this loop execute 10 times?","options":[{"text":"10","correct":false},{"text":"3","correct":true},{"text":"1","correct":false},{"text":"0","correct":false}],"illustrator":"```java\nfor(int i=0; i<30; i+=x) {}\n```"}]