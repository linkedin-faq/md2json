[{"question":" How filters are used in Spring Web?","options":[{"text":"Filters are called before a request hits the DispatcherServlet. They allow for interception-style, chained processing of web requests for security, timeouts, and other purposes.","correct":true},{"text":"Filters are used with a checksum algorithm that will filter invalid bytes out of a byte stream request body and allow for processing of HTTP requests from the DispatcherRequestServlet.","correct":false},{"text":"Filters are used with a checksum algorithm that will filter invalid bytes out of an octet stream a multipart upload and allow for chained processing of WebDispatcherServlet requests.","correct":false},{"text":"Filters are used to validate request parameters out of the byte stream request body and allow for processing of requests from the DispatcherRequestServlet.","correct":false}],"illustrator":""},{"question":" How is a resource defined in the context of a REST service?","options":[{"text":"A resource is the actual String literal that composes a URI that is accessed on a RESTful web service.","correct":false},{"text":"It is an abstract concept that represents a typed object, data, relationships, and a set of methods that operate on it that is accessed via a URI.","correct":true},{"text":"A REST service has a pool of resources composed of allocations of memory that allow a request to be processed.","correct":false},{"text":"A resource for a REST service is an explicit allocation of a thread or CPU cycles to allow a request to be processed.","correct":false}],"illustrator":""},{"question":" Which of these is a valid Advice annotation?","options":[{"text":"@AfterError","correct":false},{"text":"@AfterReturning","correct":true},{"text":"@AfterException","correct":false},{"text":"@AfterExecution","correct":false}],"illustrator":""},{"question":" What does a ViewResolver do?","options":[{"text":"It supports internationalization of web applications by detecting a user's locale.","correct":false},{"text":"It generates a view by mapping a logical view name returned by a controller method to a view technology.","correct":true},{"text":"It creates a unique view determined by the uers's browser type,supporting cross-browser compatibility.","correct":false},{"text":"It maps custom parameters to SQL views in the database, allowing for dynamic content to be created in the response.","correct":false}],"illustrator":""},{"question":" How are Spring Data repositories implemented by Spring at runtime?","options":[{"text":"Spring automatically generated code for you based on your YAML config that defined a MethodInterceptor chain that intercept calls to the instance and computed SQL on the fly.","correct":false},{"text":"A JDK proxy instance is created, which backs the repository interface, and a MethodInterceptor intercepts calls to the instance and routes as required.","correct":true},{"text":"The Spring JDK proxy creates a separate runtime process that acts as an intermediary between the database and the Web server, and intercepts calls to the instance and handles requests.","correct":false},{"text":"Spring automatically generated code for you based on your XML config files that define a SpringMethodAutoGeneration factory that intercepts calls to the instance and creates dynamic method that computer SQL on the fly.","correct":false}],"illustrator":""},{"question":" What is SpEL and how is it used in Spring?","options":[{"text":"SpEL(Spring Expression Language) runs in the JVM and can act as a drop-in replacement for Groovy or other languages.","correct":false},{"text":"SpEL(Spring Expression Language) supports boolean and relational operators and regular expressions, and is used for querying a graph of objects at runtime.","correct":true},{"text":"SpEL(Spring Expression Language) allows you to build, configure,and execute tasks such as building artifacts and downloading object dependencies.","correct":false},{"text":"SpEL(Spring Expression Language) natively transpiles one JVM language to another, allowing for greater flexibility.","correct":false}],"illustrator":""},{"question":" The process of linking aspects with other objects to create an advised object is called","options":[{"text":"dynamic chaining","correct":false},{"text":"banding","correct":false},{"text":"weaving","correct":true},{"text":"interleaving","correct":false}],"illustrator":""},{"question":" How are JDK Dynamic proxies and CGLIB proxies used in Spring?","options":[{"text":"JDK Dynamic proxy can proxy only interface, so it is used if the target implements at least one interface. A CGLIB proxy can create a proxy by subclassing and is used if the target does not implement an interface.","correct":true},{"text":"Only JDK Dynamic proxies are used in the Spring Bean Lifecycle. CGLIB proxies are used only for integrating with other frameworks.","correct":false},{"text":"Only CGLIB proxies are used in the Spring Bean Lifecycle. JDK Dynamic proxies are used only for integrating with other frameworks.","correct":false},{"text":"JDK Dynamic proxy can only using an abstract class extended by a target. A CGLIB proxy can create a proxy through bytecode interweaving and is used if the target does not extend an abstract class.","correct":false}],"illustrator":""},{"question":" Which of these is not a valid method on the JoinPoint interface?","options":[{"text":"getArgs()","correct":false},{"text":"getExceptions()","correct":true},{"text":"getSignature()","correct":false},{"text":"getTarget()","correct":false}],"illustrator":""},{"question":". In what order do the @PostConstruct annotated method, the init-method parameter method on beans and the afterPropertiesSet() method execute?","options":[{"text":"1. afterPropertiesSet() 2. init-method 3. @PostConstruct","correct":false},{"text":"1. @PostConstruct 2. afterPropertiesSet() 3. init-method","correct":true},{"text":"1. init-method 2. afterPropertiesSet() 3. @PostConstruct","correct":false},{"text":"You cannot use these methods together-you must choose only one.","correct":false}],"illustrator":""},{"question":". What is the function of the `@Transactional` annotation at the class level?","options":[{"text":"It's a transaction attribute configured by `spring.security.transactions.xml` config file that uses Spring's transaction implementation and validation code.","correct":false},{"text":"It's a transaction that must actively validate by the bytecode of a transaction using Spring's `TransactionBytecodeValidator` class. Default Transaction behavior rolls back on validation exception but commits on proper validation","correct":false},{"text":"It creates a proxy that implements the same interface(s) as the annotated class, allowing Spring to inject behaviors before, after, or around method calls into the object being proxied.","correct":true},{"text":"It's a transaction that must be actively validated by Spring's `TransactionValidator` class using Spring's transaction validation code. Default Transaction behavior rolls back on validation exception.","correct":false}],"illustrator":""},{"question":". Which is a valid example of the output from this code (ignoring logging statements) ?","options":[{"text":"Nothing will print","correct":true},{"text":"startup","correct":false},{"text":"init","correct":false},{"text":"startup","correct":false}],"illustrator":"```java\n@SpringBootApplication\npublic class App {\n     public static void main(String args[]) {\n          SpringApplication.run(App.class, args);\n          System.out.println(\"startup\");\n     }\n}\npublic class Print implements InitializingBean {\n     @Override\n     public void afterPropertiesSet() throws Exception {\n          System.out.println(\"init\");\n     }\n}\n```"},{"question":". Which println statement would you remove to stop this code throwing a null pointer exception?","options":[{"text":"formatter.getClass()","correct":true},{"text":"context.getClass()","correct":false},{"text":"context.getBean(\"formatter\").getClass()","correct":false},{"text":"context.containsBean(\"formatter\")","correct":false}],"illustrator":"```java\n@Component\npublic class Test implements InitializingBean {\n     @Autowired\n     ApplicationContext context;\n     @Autowired\n     static SimpleDateFormat formatter;\n     @Override\n     public void afterPropertiesSet() throws Exception {\n          System.out.println(context.containsBean(\"formatter\") + \" \");\n          System.out.println(context.getBean(\"formatter\").getClass());\n          System.out.println(formatter.getClass());\n          System.out.println(context.getClass());\n     }\n}\n@Configuration\nclass TestConfig {\n     @Bean\n     public SimpleDateFormat formatter() {\n          return new SimpleDateFormat();\n     }\n}\n```"},{"question":". What is the root interface for accessing a Spring bean container?","options":[{"text":"SpringInitContainer","correct":false},{"text":"ResourceLoader","correct":false},{"text":"ApplicationEventPublisher","correct":false},{"text":"BeanFactory","correct":true}],"illustrator":""},{"question":". Which annotation can be used within Spring Security to apply method level security?","options":[{"text":"@Secured","correct":true},{"text":"@RequiresRole","correct":false},{"text":"@RestrictedTo","correct":false},{"text":"@SecurePath","correct":false}],"illustrator":""},{"question":". What is the result of calling the map controller method using the HTTP request GET localhost:8080/map?foo=foo&bar=bar ?","options":[{"text":"An InvalidParameterNameMappingException is thrown at runtime.","correct":false},{"text":"barfoo","correct":false},{"text":"foobar","correct":true},{"text":"A status code of 400 Bad Request is returned.","correct":false}],"illustrator":"```java\n@RestController\npublic class SampleController {\n     @RequestMapping(\"/map\")\n     public String map(@RequestParam(\"bar\") String foo, @RequestParam(\"foo\") String bar) {\n          return bar + foo;\n     }\n}\n```"},{"question":". What is the purpose of the @Lazy annotation and why would you use it?","options":[{"text":"It prevents a bean from being created and injected until you run a specific CLI command. It reduces complexity in the application.","correct":false},{"text":"It can be applied to a bean so that the bean is not persisted in the database. It reduces the number of database operations.","correct":false},{"text":"It can be applied to a bean so that the bean is not created and injected until it is needed. It can help speed up startup time for your application.","correct":true},{"text":"It prevents a bean from being created and injected until it receives a HTTP request to a callback hook. It reduces disk footprint.","correct":false}],"illustrator":""},{"question":". What is dependency injection?","options":[{"text":"a method by which objects define dependencies they need as abstractions that allows the framework to instantiate and configure them in a central location at runtime.","correct":true},{"text":"a paradigm where dependent code is injected into the bytecode of a Java application on a remote server.","correct":false},{"text":"a way of injecting remote dependencies into a pre-packaged JAR file from the file system.","correct":false},{"text":"a way of injecting remote dependencies into a pre-packaged WAR file from the file system.","correct":false}],"illustrator":""},{"question":". What is a RESTful web service?","options":[{"text":"Reactive Enterprise Status Transfer is a web service comprising a set of guidelines and technical constraints for web services that monitor and alert of a set of mission-critical resources.","correct":false},{"text":"Representational State Transfer an architectural style for creating web services that includes client-server architecture, statelessness, cacheability, a layered system, and a uniform interface.","correct":true},{"text":"Redundant Enumerated State Transfer is a web service that provides redundancy in the case of failure and outlines technical constraints for web services that have access to resources.","correct":false},{"text":"Reactive Enterprise State Transfer is a web service comprising a set of guidelines and technical constraints for web services y that have access to resources and are async in nature.","correct":false}],"illustrator":""},{"question":". What happens when a class is annotated with the @Controller annotation?","options":[{"text":"A controller bean definition is defined in the servlet's WebApplicationContext. The class is marked as a web component, and you can map requests to controller methods.","correct":true},{"text":"A controller bean definition is defined in the Web Context, and Web Servlet is marked as a component that reads mapped controller requests from an XML config file.","correct":false},{"text":"A controller bean definition is defined in the Tomcat Context, and the Controller Servlet is marked as a web component that reads mapped controller requests from a YAML config file.","correct":false},{"text":"A controller bean definition is defined in the Servlet Context, and the Controller Servlet is marked as a component that reads mapped controller requests from an XML config file.","correct":false}],"illustrator":""},{"question":". Which property can be used to change the port of a Spring application?","options":[{"text":"Port","correct":false},{"text":"spring.port","correct":false},{"text":"spring.settings.port","correct":false},{"text":"server.port","correct":true}],"illustrator":""},{"question":". What is the purpose of the @ResponseBody annotation?","options":[{"text":"to validate the char array contained in a response to ensure that it is a valid character encoding","correct":false},{"text":"to generate a local byte stream from the body of a response that allows a request to be scanned for security risks","correct":false},{"text":"to indicate whether a handler method return value should be bound to the web response body in servlet environments","correct":true},{"text":"to ensure a ThreadLocal byte stream that allows a response to be encoded for reading directly into a socket stream","correct":false}],"illustrator":""},{"question":". How are mocking frameworks such as Mockito used with Spring?","options":[{"text":"Mockito will spin up a mock web service hosted in a Docker container that can respond to HTTP requests to mock out third-party APIs.","correct":false},{"text":"Mockito can use annotations or factory methods to create mock objects that may be injected into tests in place of dependencies. The behavior of mocks can be explicitly configured.","correct":true},{"text":"Mockito will create mock users to repeatedly perform requests against your Spring application to test your app's ability to take load.","correct":false},{"text":"Mockito will spin up a mock web service hosted in a Docker container that can respond to RPC calls to mock out remote resources.","correct":false}],"illustrator":""},{"question":". What is the name of the central servlet that dispatches requests to controllers?","options":[{"text":"DispatchingDelegatorServlet","correct":false},{"text":"DispatcherServlet","correct":true},{"text":"Router","correct":false},{"text":"FrontControllerServlet","correct":false}],"illustrator":""},{"question":". What is the purpose of the Spring IoC (Inversion of Control) container?","options":[{"text":"It instantiates and configures objects, supplied at runtime, to classes that define them as a dependency.","correct":true},{"text":"It allows the front-end code to manage the ResponseBody objects provided by a back-end REST API.","correct":false},{"text":"It allows a database to define business objects via a shared schema at compile time.","correct":false},{"text":"It facilitates a remote server to configure a local application.","correct":false}],"illustrator":""},{"question":". What is component scanning?","options":[{"text":"feature that scans packages for classes with specific annotations and, when found, creates their bean definitions within the IoC container","correct":true},{"text":"paradigm where bytecode is actively scanned to identify additional optimizations to inject into components in the application context","correct":false},{"text":"a method by which cloud repositories are scanned to identify components for injection into an IoC container","correct":false},{"text":"a method by which binary data in a database is searched to identify components for injection into the IoC container","correct":false}],"illustrator":""},{"question":". What does @SpringBootApplication do?","options":[{"text":"This annotation takes the String literal passed into the annotation as a parameter and automatically generates all the code for your application as per the passed in template parameter.","correct":false},{"text":"This compound annotation applies the @Bootable, @Springify, and @StandardConfig annotations that launch a CLI tool after launching the Spring Boot WAR file that will guide you through a series of prompts to set up your app.","correct":true},{"text":"This annotation scans the provided spring-boot-config-construction.yaml file in your root directory and automatically generates all the code for your application as defined in the YAML file.","correct":false}],"illustrator":""},{"question":". How does Spring Data facilitate queries against a datastore?","options":[{"text":"Queries are explicitly coded in repository implementations using the Spring Data CriteriaBuilder.","correct":false},{"text":"Query metadata is stored in the underlying datastore and retrieved at runtime per repository.","correct":false},{"text":"Queries are derived from the signatures of methods on a Spring Data repository that contain keywords in their name for constructing the query logic.","correct":true},{"text":"A spring-data-queries.xml file contains queries within entity tags that specify the query logic for each repository.","correct":false}],"illustrator":""},{"question":". How does Spring generate bean names for classes annotated with @Component that do not specify a name?","options":[{"text":"It uses the short name of the class with the first letter in lowercase.","correct":true},{"text":"It uses the short name of the class.","correct":false},{"text":"It uses the short name of the class in uppercase.","correct":false},{"text":"It uses the canonical name of the class in lowercase.","correct":false}],"illustrator":""},{"question":". What is the delegating filter proxy?","options":[{"text":"It's the servlet filter chain proxy that handles all requests to the route defined in spring.security.xml. All calls to the filter proxy are forwarded to the ErrorDispatcherServlet.","correct":false},{"text":"It's the servlet filter chain that handles requests to the route defined in spring.security.factories. All calls to the filter proxy y are forwarded to the ErrorServlet.","correct":false},{"text":"It's the servlet filter proxy delegating to a filter bean specified in web.xml. All calls to the filter proxy will be delegated to that servlet filter bean.","correct":true},{"text":"It's the web servlet daemon filter proxy that delegates to a bean specified in spring.security.factories. All calls to the filter proxy that do not contain a proper route will return an error.","correct":false}],"illustrator":""},{"question":". What value does Spring Boot Actuator provide?","options":[{"text":"It helps monitor and manage a Spring Boot application by providing endpoints such as health checks, auditing, metrics gathering, and HTTP tracing.","correct":true},{"text":"It provides out-of-the-box functionality that integrates with third-party metrics platforms to automatically scale up and down the number of threads in threadpools.","correct":false},{"text":"It's a CLI that allows you to modify the configuration of a running Spring Boot application without the need for restarting or downtime.","correct":false},{"text":"It provides out-of-the-box functionality that integrates wiltr?third-party metrics platforms to automatically scale up and down the number of instances of the Spring Boot application.","correct":false}],"illustrator":""},{"question":". What is the purpose of the @ContextConfiguration annotation in a JUnit Test?","options":[{"text":"It introspects the local machine and automatically provisions resources based on certain contextual configuration files.","correct":false},{"text":"It automatically generates comments for annotated classes on autowired dependencies to provide additional context about dependencies.","correct":false},{"text":"It defines metadata at the class-level to determine how to load or configure an ApplicationContext in Spring integration tests.","correct":true},{"text":"It automatically generates JavaDocs for annotated classes to provide additional context about the purpose of the class.","correct":false}],"illustrator":""},{"question":". How are authentication and authorization different?","options":[{"text":"Authentication is the act of granting access to specific resources and functions based on config settings. Authorization is the act of introspecting a user's credentials to ensure they are not impersonating another user.","correct":false},{"text":"Authentication is the act of verifying certain resources and functions are actually valid. Authorization is the act of verifying a user's credentials have not expired.","correct":false},{"text":"Authentication is the act of verifying that certain resources and functions actually exist in the database. Authorization is the act of verifying a user's credentials to ensure they are valid.","correct":false},{"text":"Authentication is validating that users are who they claim to be. Authorization is granting access to specific resources and functions.","correct":true}],"illustrator":""},{"question":". What is the purpose of the @RequestBody annotation?","options":[{"text":"to create a ThreadLocal byte stream that allows a request to be encoded for reading directly into a database","correct":false},{"text":"to automatically generate a ThreadLocal byte stream from the body of a request that allows a request to scanned for security risks","correct":false},{"text":"to indicate whether an annotated handler method parameter should be bound to the web request body, which is converted by an HttpMessageConverter","correct":true},{"text":"to automatically validate the characters contained in a request to ensure that they are a valid character encoding","correct":false}],"illustrator":""},{"question":". What is the DispatcherServlet and what is its function?","options":[{"text":"The DispatcherServlet process daemon assigns a separate Web Servlet Container process to each HTTP request that comes into the web server.","correct":false},{"text":"It is a servlet that dispatches HTTP requests to registered handlers/controllers for processing.","correct":true},{"text":"The DispatcherServlet API assigns a separate Web Servlet Node process to each additional HTTP request that comes into the web server.","correct":false},{"text":"It is a servlet that dispatches an array of background daemon processes that allocate memory and CPU cycles to each request.","correct":false}],"illustrator":""},{"question":". What is Spring Boot autoconfiguration?","options":[{"text":"It triggers a local automated review of configuration files such as web.xml and detects possible security issues or automatically resolves circular dependencies.","correct":false},{"text":"It triggers an automated review of configuration by a web-based agent that reviews your existing web.xml file and detects possible security issues.","correct":false},{"text":"It's an opinionated, intelligent method of introspecting an app to configure beans that are likely to be needed. This configuration can be overridden over time with manual configuration.","correct":true},{"text":"It provides plug-in functionality while editing your web.xml and other config files that will autocomplete common dependencies while typing.","correct":false}],"illustrator":""},{"question":". Which are valid steps to take to enable JPA in Spring Boot?","options":[{"text":"Add an @EnableJpaRepositories annotation to your configuration class and create a Spring Data Repository.","correct":true},{"text":"Add an @EnableJpaEntities annotation to your configuration class, create a Spring Data YAML configuration file, and manually update the Spring XML config files to define your repository locations.","correct":false},{"text":"Add an @EnableDbFunctionality annotation to your configuration class, create a Spring Data XML configuration file, and manually update the Spring factories file to define your repositories.","correct":false},{"text":"Add an @InitJpaEntities annotation to your configuration class, create a Spring Data properties configuration file, and manually update the Spring startup parameters to define your repository locations.","correct":false}],"illustrator":""},{"question":". What is a transaction in the context of Spring Data?","options":[{"text":"a version-controlled schema change that is applied to a database","correct":false},{"text":"a sequence of actions representing a single unit of work managed as a single operation that can be either committed or rolled back","correct":true},{"text":"an encoded message and response between various shards of a database","correct":false},{"text":"an exchange or interaction between various worker nodes in a multithreaded environment","correct":false}],"illustrator":""},{"question":". Modularization of a concern that cuts across multiple classes is known as a(n)`____`.","options":[{"text":"multiclass","correct":false},{"text":"aspect","correct":true},{"text":"crosscut","correct":false},{"text":"sidecut","correct":false}],"illustrator":""},{"question":". How do you inject a dependency into a Spring bean?","options":[{"text":"any of these answers","correct":true},{"text":"Annotate a Setter method with the @Autowired annotation.","correct":false},{"text":"Specify parameters in the constructor with an optional @Autowired annotation.","correct":false},{"text":"Use field injection.","correct":false}],"illustrator":""},{"question":". Consider the properties file application.properties. How would you load the property my.property?","options":[{"text":"A","correct":false},{"text":"B","correct":false},{"text":"C","correct":false},{"text":"D","correct":true}],"illustrator":"```java\n@Value(\"${my.property}\")\nprivate String val;\n```"},{"question":". What is a bean in the context of Spring?","options":[{"text":"a managed dependency defined by configuration metadata that can be injected into downstream classes","correct":true},{"text":"a binary-encoded, agnostic, named entity that is translatable between different data formats","correct":false},{"text":"a payload that is transferable between different services in a Service-Oriented Architecture (SOA)","correct":false},{"text":"a discrete piece of data that is encoded in a binary format for persisting to a file system","correct":false}],"illustrator":""},{"question":". Which property is given precedence by Spring?","options":[{"text":"application properties located in an application.properties file outside the application.jar","correct":false},{"text":"@PropertySource annotations on configuration classes","correct":false},{"text":"profile-specific application-{profile}.properties files","correct":true},{"text":"application properties located in an application.properties file inside the application.jar","correct":false}],"illustrator":""},{"question":". In the Spring Bean lifecycle pictured, what should the third step of the process be?","options":[{"text":"Persist bean definitions into a database","correct":false},{"text":"Instance bean objects","correct":true},{"text":"De-normalize bean definition","correct":false},{"text":"Use reflection to inject bean objects into the servlet container","correct":false}],"illustrator":""},{"question":". What Spring Boot property is used to set the logging level for the entire application in the application.properties file?","options":[{"text":"logging.settings","correct":false},{"text":"log.level","correct":false},{"text":"root.logger.level","correct":false},{"text":"logging.level.root","correct":true}],"illustrator":""},{"question":". What is a Spring bean uniquely identified?","options":[{"text":"an autogenerated UUID","correct":false},{"text":"a unique String name","correct":true},{"text":"an auto-incremented Integer ID","correct":false},{"text":"an ID derived from its location in memory","correct":false}],"illustrator":""},{"question":". What is the difference between a JAR and a WAR distribution in Spring Boot?","options":[{"text":"Spring Boot can create a self-executable WAR file that runs without needing a servlet container. A JAR file has to be deployed to an existing web container such as Tomcat with separate files for dependencies.","correct":false},{"text":"Spring Boot can create a JAR file that contains bytecode that interacts directly with the OS without needing a servlet container. A WAR file has to be deployed to an existing web container such as Tomcat with separate files for dependencies.","correct":false},{"text":"The Spring Boot JAR file will be deployed to a Servlet container such as Tomcat on an existing running web server locally. The WAR file will be deployed to a cloud-based servlet container.","correct":false},{"text":"Spring Boot can create a self-executable JAR file that contains all the dependencies and an embedded Servlet container. A WAR file has to be deployed to an existing web container such as Tomcat.","correct":true}],"illustrator":""},{"question":". How does the transaction propagation setting impact the behavior of transactions?","options":[{"text":"It ensures that transactions that are commited to the database are propagated to all the shards of a clustered database system.","correct":false},{"text":"None of these answers is correct.","correct":false},{"text":"It guarantees that transactions that are submitted to the database cluster are propagated to all the nodes of a clustered database cloud.","correct":false},{"text":"It enforces that a logical transaction scope is created for each method that determines rollback-only status, with an outer transaction scope being logically independent from the inner transaction scope.","correct":true}],"illustrator":""},{"question":". What is printed when this code is run as a @SpringBootApplication?","options":[{"text":"a null pointer stacktrace","correct":true},{"text":"true null","correct":false},{"text":"true package.TestService","correct":false},{"text":"false package.TestService","correct":false}],"illustrator":"```java\n@Component\npublic class Test implements InitializingBean {\n     @Autowired\n     ApplicationContext context;\n     private TestService service;\n     public void setService(TestService service) {\n          this.service = service;\n     }\n     @Override\n     public void afterPropertiesSet() throws Exception {\n          System.out.print(context.containsBean(\"testService\") + \" \");\n          System.out.println(service.getClass());\n     }\n}\n@Service\nclass TestService {}\n```"},{"question":". To register a custom filter that applies only to certain URL patterns, you should remove the **\\_** annotation from the filter class and register a @Bean of type `_` in Spring @Configuration.","options":[{"text":"@RequestMapping; WebRequest","correct":false},{"text":"@Controller; URLFilter","correct":false},{"text":"@WebFilter; ServletContextInitializer","correct":false},{"text":"@Component; FilterRegistrationBean","correct":true}],"illustrator":""},{"question":". What is the correct term for each definition bellow?","options":[{"text":"","correct":false},{"text":"","correct":false},{"text":"","correct":false},{"text":"","correct":true}],"illustrator":"  ```\n  1. Pointcut\n  2. Join point\n  3. Advice\n  ```"},{"question":". How should passwords be stored?","options":[{"text":"Passwords should be hashed using an adaptive one-way function such as bcrypt.","correct":true},{"text":"Passwords can be stored in a BASE64 encoded format if they are stored in a private database.","correct":false},{"text":"Passwords should be salted and hashed using the MD5 algorithm.","correct":false},{"text":"Passwords should be hashed using the SHA-1 algorithm, then salted to provide defence against rainbow table attacks.","correct":false}],"illustrator":""},{"question":". What methods does this Pointcut expression reference?","options":[{"text":"any join point where the target object has a @Loggable annotation","correct":true},{"text":"any join point where the executing method has a @Loggable annotation","correct":false},{"text":"any method that implements Loggable","correct":false},{"text":"any method that extends Loggable","correct":false}],"illustrator":""},{"question":". What is printed when this code is run as a @SpringBootApplication?","options":[{"text":"true <br />","correct":false},{"text":"true <br />","correct":false},{"text":"a NullPointerException stacktrace","correct":false},{"text":"a BeanDefinitionParsingException stacktrace","correct":true}],"illustrator":"```java\n@Component\npublic class Test implements InitializingBean {\n     @Autowired\n     ApplicationContext context;\n     @Autowired\n     SimpleDateFormat formatter;\n     @Override\n     public void afterPropertiesSet() throws Exception {\n          System.out.println(context.containsBean(\"formatter\"));\n          System.out.println(formatter.getClass());\n     }\n}\n@Configuration\nclass TestConfig2 {\n    @Bean\n    public final SimpleDateFormat formatter() {\n        return new SimpleDateFormat();\n    }\n}\n```"},{"question":". What is the purpose of a web application context?","options":[{"text":"Configures a web application that is able to be deleted and re-created during runtime through hot swap. It adds a **recreateContext()** method and defines a root WebDaemon that must be bound to in the bootstrap process.","correct":false},{"text":"It configures a Spring application that is able to be modified on the fly during runtime through bytecode re-encoding. Also it adds an **updateContext()** method and defines a root WebServlet that must be bound to in the bootstrap process.","correct":false},{"text":"It provides configuration for a web application that is read-only while running. Also, it adds a **getServletContext()** method and defines an attribute name to which the root context must be bound in the bootstrap process.","correct":true},{"text":"It provides configuration for a Spring application that is updatable on the fly during runtime through bytecode weaving. Also it adds an **updateServletContext()** method and defines a root servlet that must be bound to in the bootstrap process.","correct":false}],"illustrator":""},{"question":". What is Spring AOP?","options":[{"text":"Aspect-Oriented Programming allows you to define different cross-cutting aspects that isolate beans to be available only in certain environments and profiles.","correct":false},{"text":"Aspect-Oriented Programming enables you to perform profiling, which lets you develop different cross-cutting JVM performance-tuning profiles for different aspects of your applications.","correct":false},{"text":"Aspect-Oriented Programming enables the modularization of cross-cutting concerns so that repeated boilerplate logic, such as logging code, does not pollute business logic.","correct":true},{"text":"Aspect-Oriented Programming enables you to persist cross-cutting data across modularized shards of your database.","correct":false}],"illustrator":""},{"question":". Assuming username and password authentication is in place, what method on the Authentication object can be used to obtain the username?","options":[{"text":"getPrincipal","correct":true},{"text":"getUsername","correct":false},{"text":"getUser","correct":false},{"text":"getDn","correct":false}],"illustrator":""},{"question":". Assuming no additional configuration is provided, what is the first selection criteria Spring uses to choose a bean when autowiring a property?","options":[{"text":"none of these answers","correct":false},{"text":"bean type","correct":false},{"text":"bean size","correct":false},{"text":"bean name","correct":true}],"illustrator":""},{"question":". What is the result of calling the map controller method using the following HTTP request?","options":[{"text":"An InvalidRequestBodyException is thrown at runtime.","correct":false},{"text":"A MissingPropertyException is thrown at runtime.","correct":false},{"text":"The text \"bnull\" is returned in the response body.","correct":true},{"text":"The text \"a\" is returned in th response body.","correct":false}],"illustrator":"```\nPOST localhost:8080/map\n{\"b\" : \"b\", \"d\" : \"d\"}\n```\n```java\n@RestController\npublic class SampleController {\n    @RequestMapping(\"/map\")\n    public String map(@RequestBody SampleObject sampleObject) {\n        return sampleObject.getB() + sampleObject.getC();\n    }\n}\n```\n```java\npublic class SampleObject {\n    String b;\n    String c;\n    public String getB() { return b; }\n    public void setB() { this.b = b; }\n    public String getC() { return c; }\n    public void setC() { this.c = c; }\n}\n```"},{"question":". What effect does private static have on the object service below?","options":[{"text":"The application will result in a compile error because you can't autowire a private variable.","correct":false},{"text":"The application will compile and run, and service will have its dependency correctly injected by Spring.","correct":false},{"text":"The application will compile and run, but service will not be autowired because you cannot autowire a static class member.","correct":true},{"text":"The application will result in a compile error because you attempted to autowire a static variable.","correct":false}],"illustrator":"```java\n@SpringBootApplication\npublic class Question14 {\n    @Autowired\n    private static Service service;\n    public static void main(String[] args) {\n        SpringApplication.run(Question14.class, args);\n    }\n}\n@Component\nclass Service {}\n```"},{"question":". What is a security context?","options":[{"text":"The security context includes details of the principal currently using the app, which is stored by default in a `ThreadLocal` in an `Authentication` object.","correct":true},{"text":"The security context holds a list of all users and their encrypted passwords in memory and a list of resources that users are able to access.","correct":false},{"text":"The security context includes information about safe network IDs and IP addresses that are able to access the system.","correct":false},{"text":"The security context includes information about permissions on the local file system describing how local file resources can be accessed.","correct":false}],"illustrator":""},{"question":". How might you map an incoming request to a controller method?","options":[{"text":"Annotate a Controller class with `@Controller`. Then, using a specific naming convention for the methods, the `RequestMappingHandlerAdapter` will automatically configure your endpoints with the proper HTTP verb and URI.","correct":false},{"text":"Register a controller as a bean. Then, using a specific naming convention for the methods, the `RequestMappingHandlerAdapter` will automatically configure your endpoints based on values from the YAML config file.","correct":false},{"text":"Annotate a controller method with `@RequestMapping`, or a HTTP verb-specific annotation with a String URI pattern parameter (and other params as needed), which is supported through a `RequestMappingHandlerMapping/Adapter`.","correct":true},{"text":"Register a controller as a bean. Then, using a specific naming convention for the methods, the RequestMappingHandlerAdapter will automatically configure your endpoints based on values passed into the bean definition.","correct":false}],"illustrator":""},{"question":". What methods does the Pointcut expression below reference?","options":[{"text":"any method with a name that contains the String \"setter\" with a single parameter","correct":false},{"text":"any method with a name that begins with String \"setter\" with a single parameter","correct":false},{"text":"any method with a name that begins with String \"setter\"","correct":true},{"text":"any method with a name that contains the String \"setter\"","correct":false}],"illustrator":""},{"question":". What pattern does Spring MVC implement to delegate request processing to controllers?","options":[{"text":"Front Controller","correct":true},{"text":"Facade","correct":false},{"text":"Reactive Chain","correct":false},{"text":"Observer","correct":false}],"illustrator":""},{"question":". What methods does this Pointcut expression?","options":[{"text":"any join point only within the service package","correct":false},{"text":"This is not valid Pointcut expression","correct":false},{"text":"any method in a class that autowires a service bean","correct":false},{"text":"any join point within the service package or one of its subpackages","correct":true}],"illustrator":""},{"question":". What is the output from invoking this Actuator endpoint in an unmodified Spring Boot application generated using Spring Intializr?","options":[{"text":"The request would fail because the endpoint is disabled by default.","correct":true},{"text":"The Spring Boot app would return a URL and a list of currently running processes, and ask you to confirm the shutdown command.","correct":false},{"text":"The Spring Boot app would return a URL to confirm the shutdown command.","correct":false},{"text":"The Spring Boot app would begin shutting down.","correct":false}],"illustrator":""},{"question":". How can you access the application context in a Spring integration test?","options":[{"text":"The context is present in a ThreadLocal so you can just call getSpringApplicationContextInstance() anywhere in a test to get the current context.","correct":false},{"text":"Test classes can implement the ApplicationContextAware interface or autowire the ApplicationContext.","correct":true},{"text":"The context is automatically injected in every test so you can just call getSpringApplicationContextInstance() anywhere in a test to get the current context.","correct":false},{"text":"You can just add the parameter Context context to any method so that the context is automatically wired in.","correct":false}],"illustrator":""},{"question":". What interface can be specified as a parameter in a controller method signature to handle file uploads?","options":[{"text":"FilePath","correct":false},{"text":"MultipartFile","correct":true},{"text":"File","correct":false},{"text":"MvcFile","correct":false}],"illustrator":""},{"question":". What is the purpose of this endpoint?","options":[{"text":"This endpoint is designed to delete an object of the typetype Pojo with the passed in path variable","correct":false},{"text":"This endpoint is designed to return JSON mapped to the object type Pojo with the passed in id.","correct":true},{"text":"This endpoint returns the path variable that describes the Pojo's location within the container.","correct":false},{"text":"This endpoint is designed to update an existing resource of the object type Pojo with the passed in id.","correct":false}],"illustrator":"```java\n@GetMapping(\"api/v1/domain/resource/{id}\")\npublic Pojo getPojo(@PathVariable(\"id\") String id) {\n  return testService.getPojo(id);\n}\n```"},{"question":". What property can be used to set the active Spring profiles","options":[{"text":"active.profile","correct":false},{"text":"active.spring.profiles","correct":false},{"text":"spring.profiles.active","correct":true},{"text":"profiles","correct":false}],"illustrator":""},{"question":". Which statement is true regarding loading and instantiation of Spring factories?","options":[{"text":"During startup, the SpringFactoryInitializr collects all files in the CONFIG-INF directory from each dependency and downloads binaries to run each file.","correct":false},{"text":"During startup, the SpringFactoriesLoader gets a list of config and collects all the files in META-INF directory from dependencies. Then it builds a composite list for application context configurations.","correct":false},{"text":"During shutdown, the SpringFactoryDestructor collects all the files in META-INF directory from each dependency and begins shutting down each thread and process.","correct":false},{"text":"During startup and shutdown, the SpringFactoryInitializr downloads project configs for all configured dependencies.","correct":false}],"illustrator":""},{"question":". What methods does this Pointcut expression reference?","options":[{"text":"all methods of classes in the com.linkedin.TestService package","correct":false},{"text":"all methods of classes in the com.linkedin.TestService package annotated whith @Service","correct":false},{"text":"This Pointcut is not valid.","correct":false},{"text":"all methods defined by the TestService interface","correct":false}],"illustrator":"```java\n     execution(* com.linkedin.TestService.*(..))\n```"},{"question":". When configuring an application, which configuration is given precedence by Spring?","options":[{"text":"profile specific application-{profile}.properties files","correct":false},{"text":"Java System Properties","correct":false},{"text":"application properties located in an application.properties file inside the application.jar","correct":false},{"text":"profile specific application-{profile}.properties files located outside the application.jar","correct":false}],"illustrator":""},{"question":". What interface is used to represent a permission in Spring Security?","options":[{"text":"GrantedAuthority","correct":false},{"text":"SecurityChain","correct":false},{"text":"PermissionMatrix","correct":false},{"text":"AccessRule","correct":true}],"illustrator":""},{"question":". What is the difference between constructor injection and setter injection?","options":[{"text":"Constructor injection overrides setter injection.","correct":false},{"text":"Setter injection creates a new instance if any modification occurs.","correct":false},{"text":"You can't use constructor injection for partial injection.","correct":false},{"text":"Constructor injection is more flexible than setter injection.","correct":false}],"illustrator":""},{"question":". Which println would you remove to stop this code from throwing a null pointer exception?","options":[{"text":"formatter.getClass()","correct":false},{"text":"context.containsBean(\"formatter\")","correct":false},{"text":"context.getBean(\"formatter\").getClass()","correct":false},{"text":"context.getClass()","correct":false}],"illustrator":"```java\n@Component\npublic class Test implements InitializingBean {\n     @Autowired\n     ApplicationContext context;\n     @Autowired\n     static SimpleDateFormat formatter;\n     @Override\n     public void afterPropertiesSet() throws Exception {\n          System.out.println(context.containsBean(\"formatter\") + \" \");\n          System.out.println(context.getBean(\"formatter\").getClass());\n          System.out.println(formatter.getClass());\n          System.out.println(context.getClass());\n     }\n}\n@Configuration\nclass TestConfig {\n     @Bean\n     public SimpleDateFormat formatter() {\n          return new SimpleDateFormat();\n     }\n}\n```"},{"question":". What is the default rollback policy?","options":[{"text":"A rollback is triggered during any error that occurs during the transaction.","correct":false},{"text":"When an instance or subclass of Exception is thrown, this triggers a rollback, while any runtime exceptions do not.","correct":false},{"text":"Anytime an instance or subclass of Throwable is thrown, this triggers a rollback.","correct":false},{"text":"When an instance or subclass of RuntimeException is thrown, this triggers a rollback, while any checked Exception does not.","correct":false}],"illustrator":""},{"question":". What is the difference between a CrudRepository and a JpaRepository?","options":[{"text":"The CrudRepository extends the PagingAndSortingRepository, while the JpaRepository does not.","correct":false},{"text":"The CrudRepository exposes a superset of interface methods containing every datastore-specific method supported by Spring data. The JpaRepository contains only those specific to Spring Data JPA.","correct":false},{"text":"The CrudRepository is a base interface within Spring Data core that exposes a dedicated set of functions. The JpaRepository is a store-specific interface that exposes functionality specific to JPA.","correct":false},{"text":"The CrudRepository is part of the Java EE API, while JpaRepository is specific to Spring Data.","correct":false}],"illustrator":""},{"question":". What is the security filter chain?","options":[{"text":"It's a security filter chain that provides authentication with manual intervention such that multiple administrators of the system are able to approve users with auditability and traceability.","correct":false},{"text":"It's a series of user-completed activities—such as password authorization, token verification, and many others—that require multiple factors of authentication to increase the level of security in the system.","correct":false},{"text":"It's a servlet filter chain where each filter has a specific responsibility such as security context, user and password authorization, exception translation, or filter security interception, processed in order.","correct":false},{"text":"It's a security filter chain that consumes multiple factors of authentication—such as password, token verification, biometrics, and IP whitelisting—to successfully log a user into the system.","correct":false}],"illustrator":""},{"question":". Which is not a valid stereotype annotation?","options":[{"text":"@Component","correct":false},{"text":"@Service","correct":false},{"text":"@HtmlController","correct":false},{"text":"@Controller","correct":false}],"illustrator":""},{"question":". Which statement is true regarding loading and instantiation of Spring factories?","options":[{"text":"During startup, the SpringFactoriesLoader gets a list of configs and collects all the files in META-INF directory from dependencies. Then it builds a composite list for application context configurations.","correct":false},{"text":"During shutdown, the SpringFactoryDestructor collects all the files in META-INF directory from each dependency and begins shutting down each thread and process.","correct":false},{"text":"During startup, the SpringFactoryInitializr collects all files in the CONFIG-INF directory from each dependency and downloads binaries to run each file.","correct":false},{"text":"During startup and shutdown, the SpringFactoryInitializr downloads project configs for all configured dependencies.","correct":false}],"illustrator":""},{"question":". What methods does this Pointcut expression reference?","options":[{"text":"all methods defined in the service package","correct":false},{"text":"The Pointcut is not valid.","correct":false},{"text":"all methods defined in a service interface","correct":false},{"text":"all methods defined in the service package or one of its subpackages","correct":false}],"illustrator":""},{"question":". What is a transaction isolation level?","options":[{"text":"executing each transaction in its own dedicated threadpool to facilitate thread isolation","correct":false},{"text":"facilitating each transaction to occur on its own dedicated vCPU to guarantee throughput","correct":false},{"text":"the level of visibility and access a transaction has to the units of work of other transactions such as uncommitted writes","correct":false},{"text":"executing each transaction on its own process to provide resource isolation","correct":false}],"illustrator":""},{"question":". What does the statement “Spring offers fully-typed advice” mean?","options":[{"text":"You declare the parameters you need in the advice signature rather than work with Object[] arrays.","correct":false},{"text":"You work with a collection of Objects that need to be explicitly casted.","correct":false},{"text":"You work with an array of a Generic type T[] instead of Object[] arrays.","correct":false},{"text":"You are able to undo type erasure in the Object[] that is exposed","correct":false}],"illustrator":""}]