[{"question":" What is the value of s?","options":[{"text":"123456","correct":true},{"text":"123","correct":false},{"text":"456","correct":false},{"text":"This code contains an error.","correct":false}],"illustrator":"```\nNSMutableString *s = [NSMutableString stringWithString: @\"123\"];\n[s appendString: @\"456\"];\n```"},{"question":" What's the value of i after these statements?","options":[{"text":"nil","correct":false},{"text":"0 (technically `nil` == 0 but i will have a literal value of `0` and not the `void*` value of `nil`)","correct":true},{"text":"-1","correct":false},{"text":"This code crashes.","correct":false}],"illustrator":"```\nNSString *str = nil;\nNSInteger i = str.integerValue;\n```"},{"question":" What value is in str after this line in executed?","options":[{"text":"This code contains an error","correct":true},{"text":"test","correct":false},{"text":"nil","correct":false},{"text":"test more","correct":false}],"illustrator":""},{"question":" What does this code print?","options":[{"text":"2","correct":true},{"text":"1,2,3","correct":false},{"text":"1,2","correct":false},{"text":"Nothing, since this code contains an error.","correct":false}],"illustrator":"```\n    NSPredicate *p2 = [NSPredicate predicateWithBlock:^BOOL(NSString*  evaluatedObject, NSDictionary<NSString *,id> * _Nullable bindings) {\n      return evaluatedObject.intValue % 2 == 0;\n    }];\n    NSArray *vals = @[@\"1\", @\"2\", @\"3\"];\n    NSArray *n2 = [vals filteredArrayUsingPredicate:p2];\n    NSLog(@\"%@\", n2.firstObject);\n```"},{"question":" Property defaults include \\_?","options":[{"text":"atomic/strong","correct":true},{"text":"atomic/weak","correct":false},{"text":"nonatomic/weak","correct":false},{"text":"nonatomic/strong","correct":false}],"illustrator":""},{"question":" What is the key difference between NSDictionary and NSMutableDictionary?","options":[{"text":"NSMutableDictionary's values can change","correct":true},{"text":"NSMutableDictionary has not initializers.","correct":false},{"text":"NSDictionary can't be copied.","correct":false},{"text":"NSDictionary's values can change.","correct":false}],"illustrator":""},{"question":" What is foo?","options":[{"text":"A function with a return type of float.","correct":true},{"text":"This code contains an error.","correct":false},{"text":"A variable declaration of type float.","correct":false},{"text":"A property of type float.","correct":false}],"illustrator":""},{"question":" What can you glean from this line?","options":[{"text":"NameHelper is a category of NSString.","correct":true},{"text":"NameHelper is a subclass of NSString.","correct":false},{"text":"NSString implements the NameHelper protocol.","correct":false},{"text":"NSString has a helper class.","correct":false}],"illustrator":""},{"question":" What's wrong with this code?","options":[{"text":"Nothing is wrong with this code.","correct":true},{"text":"Declarations do not need semicolons.","correct":false},{"text":"x=5 is an invalid float.","correct":false},{"text":"Variables can't be declared and initialized in the same state.","correct":false}],"illustrator":""},{"question":". How many times with this loop be executed?","options":[{"text":"50","correct":true},{"text":"99","correct":false},{"text":"100","correct":false},{"text":"This code contains an error.","correct":false}],"illustrator":"```\nfor (int x=0; x<100; x++) {\n  x = x + 1;\n}\n```"},{"question":". What is this code an example of?","options":[{"text":"Key-Value Observing","correct":true},{"text":"Class Value Observing","correct":false},{"text":"Key-Data Observing","correct":false},{"text":"KeyPath Observing","correct":false}],"illustrator":""},{"question":". What does ARC stand for?","options":[{"text":"Automatic Reference Counting","correct":true},{"text":"Automatic Retain Checking","correct":false},{"text":"Async Retain Cycles","correct":false},{"text":"Automatic Release Code","correct":false}],"illustrator":""},{"question":". What is printed for this code?","options":[{"text":"1","correct":true},{"text":"2","correct":false},{"text":"0","correct":false},{"text":"This code contains an error.","correct":false}],"illustrator":"```\nint val = 0;\nval = 1.5;\nprintf(\"%d\", val);\n```"},{"question":". What best describes class inheritance in Objective-C?","options":[{"text":"single inheritance but multiple protocol implementation","correct":true},{"text":"Objective-C doesn't support inheritance","correct":false},{"text":"dual class inheritance","correct":false},{"text":"unlimited class inheritance and protocol adherence","correct":false}],"illustrator":""},{"question":". How many keys does this NSDictionary have after this code is executed?","options":[{"text":"2","correct":true},{"text":"4","correct":false},{"text":"5","correct":false},{"text":"This code contains an error.","correct":false}],"illustrator":""},{"question":". What is wrong with this code?","options":[{"text":"The key and value items are mixed","correct":false},{"text":"Nothing is wrong with it","correct":true},{"text":"You can't set the capacity of a dictionary","correct":false},{"text":"NSMutableDictionary doesn't have a :setValue:forKey function.","correct":false}],"illustrator":"```\nNSMutableDictionary *dict1 = [NSMutableDictionary dictionaryWithCapacity:5];\n[dict1 setValue:@\"key\" forKey:@\"value\"];\n```"},{"question":". What is printed from this code?","options":[{"text":"print","correct":true},{"text":"This code is invalid","correct":false},{"text":"Nothing is printed from this code.","correct":false},{"text":"nil","correct":false}],"illustrator":"```\nNSData *data = [@\"print\" dataUsingEncoding:NSASCIIStringEncoding];\nNSLog(@\"%@\", [[NSString alloc] initWithData:data encoding:NSASCIIStringEncoding]);\n```"},{"question":". What is different about this function?","options":[{"text":"It is static","correct":true},{"text":"It is abstract.","correct":false},{"text":"It is inline.","correct":false},{"text":"This code contains an error.","correct":false}],"illustrator":""},{"question":". Structs can have \\_?","options":[{"text":"functions","correct":false},{"text":"initializers","correct":false},{"text":"fields","correct":true},{"text":"all of these answers","correct":false}],"illustrator":""},{"question":". What is wrong with this code?","options":[{"text":"There is nothing wrong with this code.","correct":true},{"text":"There is not read-only directive.","correct":false},{"text":"MyClass doesn't implement NSObject.","correct":false},{"text":"Properties are declared in the implementation.","correct":false}],"illustrator":"```\n@interface MyClass : NSObject\n    @property (strong, nonatomic, readonly) NSString *name;\n  @end\n```"},{"question":". What is an enums base type for the code below?","options":[{"text":"There is no base type.","correct":true},{"text":"NSObject","correct":false},{"text":"int","correct":false},{"text":"NSNumber","correct":false}],"illustrator":""},{"question":". If you want to store a small amount of information (e.g., user settings), whats the best, built-in way to go?","options":[{"text":"UserDefaults","correct":true},{"text":"plist file","correct":false},{"text":"CoreData","correct":false},{"text":"TextFile","correct":false}],"illustrator":""},{"question":". What are categories used for?","options":[{"text":"to extend other classes","correct":true},{"text":"to manage access control","correct":false},{"text":"to coordinate objects","correct":false},{"text":"to group classes","correct":false}],"illustrator":""},{"question":". What is this Objective-C code checking?","options":[{"text":"This code contains an error","correct":true},{"text":"if keyPath is an instance of NSString","correct":false},{"text":"if keyPath's baseclass is the same as NSString's baseclass","correct":false},{"text":"if keyPath implements the same methods as NSString","correct":false}],"illustrator":"```\nif ([keyPath isInstanceOf:[NSString class]]) {\n}\n```"},{"question":". What is this a declaration of?","options":[{"text":"an Extension","correct":false},{"text":"a Generic","correct":false},{"text":"a block of code","correct":true},{"text":"an abstract class","correct":false}],"illustrator":""},{"question":". For observing changes to a property, which of these two statements cause the related method to be called and why?","options":[{"text":"Statement 2, since it calls the auto-created setter on the property.","correct":true},{"text":"Statement 1, since it uses the property directly.","correct":false},{"text":"Statement 2, since it specifies the class instance to use.","correct":false},{"text":"Statement 1, since it calls the auto-created setter on the property.","correct":false}],"illustrator":"```\n1. _val = 1;\n2. self.val= 100;\n```"},{"question":". What is wrong with this code?","options":[{"text":"Ints and floats can't be multiplied.","correct":false},{"text":"The parameter isn't declared correctly.","correct":false},{"text":"x is not in the right scope.","correct":false},{"text":"Nothing is wrong with this code.","correct":true}],"illustrator":"```\nfloat x = 2.0;\nint(^foo)(int) = ^(int n1) {\n  return (int)(n1*x);\n};\nfoo(5);\n```"},{"question":". What's the difference between an array and a set?","options":[{"text":"Arrays are ordered, non-unique values.","correct":true},{"text":"Arrays are stored sorted.","correct":false},{"text":"Sets are ordered, unique values.","correct":false},{"text":"Sets can contain nils.","correct":false}],"illustrator":""},{"question":". Dot notation can be used for \\_?","options":[{"text":"nothing, as they're never used in Objective-C","correct":false},{"text":"function calls only","correct":false},{"text":"property getter/setter","correct":true},{"text":"parameter delimiters","correct":false}],"illustrator":""},{"question":". What is the value of newVals after this code is executed?","options":[{"text":"2,3","correct":true},{"text":"nil","correct":false},{"text":"This code contains an error","correct":false},{"text":"2,\"3\"","correct":false}],"illustrator":"```\n    NSArray *vals = @[@\"1\", @\"2\", @\"3\"];\n    NSPredicate *pred = [NSPredicate predicateWithFormat:@\"SELF.intValue > 1\"];\n    NSArray *newVals = [vals filteredArrayUsingPredicate:pred];\n```"},{"question":". How would this function be called?","options":[{"text":"self.foo(5, b:10);","correct":false},{"text":"This code contains an error.","correct":false},{"text":"[self foo:5:10:20];","correct":false},{"text":"[self foo:5 b:10];","correct":true}],"illustrator":""},{"question":". What is the type of the error return value stored in json?","options":[{"text":"NSString","correct":false},{"text":"NSArray","correct":false},{"text":"id","correct":false},{"text":"NSDictionary","correct":false}],"illustrator":"```\n    NSError *error;\n    NSData *data;\n    id json = [NSJSONSerialization JSONObjectWithData:data options:NSJSONReadingAllowFragments error:&error];\n```"},{"question":". What is significant about this function declaration?","options":[{"text":"The parameter is passed by value and can not be changed","correct":false},{"text":"\\*\\* is not allowed on a parameter","correct":false},{"text":"The parameter may be nil","correct":false},{"text":"The parameter is passed by reference and may be changed","correct":true}],"illustrator":"```\n    -(void)testFunc:(NSString**)str;\n```"},{"question":". What is printed from this code execution?","options":[{"text":"0","correct":false},{"text":"1","correct":true},{"text":"thing2","correct":false},{"text":"This code does not print anything","correct":false}],"illustrator":"```\n    typedef enum {\n        thing1,\n        thing2,\n        thing3\n    } Thing;\n    -(void) enumStuff {\n        NSLog(@\"%d\", thing2);\n    }\n```"},{"question":". You are worried about threaded access to a property and possible collision in writing. What directive should you use on the property?","options":[{"text":"non-atomic","correct":false},{"text":"strong","correct":false},{"text":"weak","correct":false},{"text":"atomic","correct":true}],"illustrator":""},{"question":". What is wrong with this line of code?","options":[{"text":"`temp` is a keyword.","correct":false},{"text":"1==1 is invalid.","correct":false},{"text":"1==1 evaluates to a Boolean.","correct":false},{"text":"Nothing is wrong with it.","correct":true}],"illustrator":"```\nint temp = 1==1;\n```"},{"question":". What is special about the code within this block?","options":[{"text":"It executes on the main queue.","correct":true},{"text":"It is the last code to run before the app goes inactive.","correct":false},{"text":"It executes on a background thread.","correct":false},{"text":"It is queued to execute in the background.","correct":false}],"illustrator":"```\ndispatch_async(dispatch_get_main_queue(), ^{\n// code\n});\n```"},{"question":". How many items are in set1 after this code executes?","options":[{"text":"zero","correct":false},{"text":"six","correct":false},{"text":"one","correct":false},{"text":"five","correct":true}],"illustrator":"```\nNSMutableSet *set1 = [NSMutableSet setWithObjects: @1,@2, @3, @4, @5, nil];\n[set1 add0bject:@3];\n```"},{"question":". What is wrong with this code?","options":[{"text":"NSDictionary cannot be printed this way.","correct":false},{"text":"The last key is missing a value.","correct":true},{"text":"Dictionaries cannot have mixed types as values.","correct":false},{"text":"d1 is assigned an NSArray of values.","correct":false}],"illustrator":"```\nNSDictionary *d1 = @[@\"v1\", @4, @\"v2\", @5.6, @\"v3\"];\nNSlog(@\"d1: %@\", d1);\n```"},{"question":". What is the initial value of the property `val`?","options":[{"text":"8","correct":false},{"text":"nil","correct":false},{"text":"-1","correct":false},{"text":"undefined","correct":false}],"illustrator":"```\n@property (nonatomic, readonly) int val;\n```"}]