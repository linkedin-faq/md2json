[{"question":" You would like to print each score on its own line with its cardinal position. Without using **var** or **val**, which method allows iteration with both the value and its position?","options":[{"text":"`.withIndex()`","correct":true},{"text":"`.forEachIndexed()`","correct":false},{"text":"`.forEach()`","correct":false},{"text":"`.forIndexes()`","correct":false}],"illustrator":"```kotlin\nfun main() {\n  val highScores = listOf(4000, 2000, 10200, 12000, 9030)\n}\n```"},{"question":" When the **Airplane** class is instantiated, it displays **Aircraft = null**, not **Aircraft = C130** why?","options":[{"text":"Classes are initialized in the same order they are in the file, therefore, Aircraft should appear after Airplane","correct":false},{"text":"The code needs to pass the parameter to the base class's primary constructor. Since it does not, it receives a null","correct":false},{"text":"Abstract function always returns null","correct":true},{"text":"A superclass is initialized before its subclass. Therefore, name has not been set before it is rendered","correct":false}],"illustrator":"```kotlin\nabstract class Aircraft {\n  init { println(\"Aircraft = ${getName()}\") }\n  abstract fun getName(): String\n}\nclass Airplane(private val name: String) : Aircraft() {\n  override fun getName(): String = name\n}\n```"},{"question":" Kotlin interfaces and abstract classes are very similar. What is one thing abstract class can do that interfaces cannot?","options":[{"text":"Only abstract classes are inheritable by subclasses","correct":false},{"text":"Only abstract classes can inherit from multiple superclasses","correct":false},{"text":"Only abstract classes can have abstract methods","correct":false},{"text":"Only abstract classes can store state","correct":true}],"illustrator":""},{"question":" Inside an extension function, what is the name of the variable that corresponds to the receiver object","options":[{"text":"The variable is named **it**","correct":false},{"text":"The variable is named **this**","correct":true},{"text":"The variable is named **receiver**","correct":false},{"text":"The variable is named **default**","correct":false}],"illustrator":""},{"question":" Your application has an **add** function. How could you use its **invoke** methods and display the results?","options":[{"text":"`println(add(5,10).invoke())`","correct":false},{"text":"`println(::add.invoke(5, 10))`","correct":true},{"text":"`println(::add.invoke{5, 10})`","correct":false},{"text":"`println(add.invoke(5,10))`","correct":false}],"illustrator":"```kotlin\nfun add(a: Int, b: Int): Int {\n  return a + b\n}\n```"},{"question":" What is the entry point for a Kotlin application?","options":[{"text":"`fun static main(){}`","correct":false},{"text":"`fun main(){}`","correct":true},{"text":"`fun Main(){}`","correct":false},{"text":"`public static void main(){}`","correct":false}],"illustrator":""},{"question":" You are writing a console app in Kotlin that processes test entered by the user. If the user enters an empty string, the program exits. Which kind of loop would work best for this app? Keep in mind that the loop is entered at least once","options":[{"text":"a do..while loop","correct":true},{"text":"a for loop","correct":false},{"text":"a while loop","correct":false},{"text":"a forEach loop","correct":false}],"illustrator":""},{"question":" You pass an integer to a function expecting type Any. It works without issue. Why is a primitive integer able to work with a function that expects an object?","options":[{"text":"While the code runs, it does not produce correct results","correct":false},{"text":"The integer is always a class","correct":false},{"text":"The compiler runs an implicit `.toClass()` method on the integer","correct":false},{"text":"The integer is autoboxed to a Kotlin Int class","correct":true}],"illustrator":"```kotlin\nfun showHashCode(obj: Any){\n  println(\"${obj.hasCode()}\")\n}\nfun main() {\n  showHashCode(1)\n}\n```"},{"question":" You have started a long-running coroutine whose job you have assigned to a variable named **task**. If the need arose, how could you abort the coroutine?","options":[{"text":"`task.join()`","correct":false},{"text":"`task.abort()`","correct":false},{"text":"`job.stop()`","correct":false},{"text":"`task.cancel()`","correct":true}],"illustrator":"```kotlin\nval task = launch {\n  // long running job\n}\n```"},{"question":". You are attempting to assign an integer variable to a long variable, but Kotlin compiler flags it as an error. Why?","options":[{"text":"You must wrap all implicit conversion in a try/catch block","correct":false},{"text":"You can only assign `Long` to an `Int`, not the other way around","correct":false},{"text":"There is no implicit conversion from `Int` to `Long`","correct":true},{"text":"All integers in Kotlin are of type `Long`","correct":false}],"illustrator":""},{"question":". You have written a snippet of code to display the results of the roll of a six-sided die. When the die displays from 3 to 6 inclusive, you want to display a special message. Using a Kotlin range, what code should you add?","options":[{"text":"`3,4,5,6`","correct":true},{"text":"`in 3..6`","correct":true},{"text":"`3 : 6`","correct":false},{"text":"`{3,4,5,6}`","correct":false}],"illustrator":"```kotlin\nwhen (die) {\n  1 -> println(\"die is 1\")\n  2 -> println(\"die is 2\")\n  ___ -> printlin(\"die is between 3 and 6\")\n  else -> printlin(\"dies is unknown\")\n}\n```"},{"question":". The function **typeChecker** receiver a parameter **obj** of type **Any**. Based upon the type of **obj**, it prints different messages for Int, String, Double, and Float types; if not any of the mentioned types, it prints \"unknown type\". What operator allows you to determine the type of an object?","options":[{"text":"`instanceof`","correct":false},{"text":"`is`","correct":true},{"text":"`typeof`","correct":false},{"text":"`as`","correct":false}],"illustrator":""},{"question":". This code does not print any output to the console. What is wrong?","options":[{"text":"A null pointer exception is thrown","correct":false},{"text":"`firstName` is equal to `null`","correct":true},{"text":"`firstName` is equal to an empty string","correct":false},{"text":"`firstName` is equal to Boolean `false`","correct":false}],"illustrator":"```kotlin\nfirstName?.let {\n  println(\"Greeting $firstname!\")\n}\n```"},{"question":". You have a function simple() that is called frequently in your code. You place the inline prefix on the function. What effect does it have on the code?","options":[{"text":"The code will give a stack overflow error","correct":false},{"text":"The compiler warns of insignificant performance impact","correct":true},{"text":"The compiler warns of significant memory usage","correct":false},{"text":"The code is significantly faster","correct":false}],"illustrator":"```kotlin\ninline fun simple(x: Int): Int{\n  return x * x\n}\nfun main() {\n  for(count in 1..1000) {\n    simple(count)\n  }\n}\n```"},{"question":". How do you fill in the blank below to display all of the even numbers from 1 to 10 with least amount of code?","options":[{"text":"`count in 1..10`","correct":false},{"text":"`count in 2..10 step 2`","correct":true},{"text":"`count in 1..10 % 2`","correct":false},{"text":"`var count=2; count <= 10; count+=2`","correct":false}],"illustrator":"```kotlin\nfor (_____) {\n  println(\"There are $count butterflies.\")\n}\n```"},{"question":". What value is printed by println()?","options":[{"text":"3","correct":true},{"text":"4","correct":false},{"text":"1","correct":false},{"text":"5","correct":false}],"illustrator":"```kotlin\nval set = setOf(\"apple\", \"pear\", \"orange\", \"apple\")\nprintln(set.count())\n```"},{"question":". Which line of code shows how to display a nullable string's length and shows 0 instead of null?","options":[{"text":"`println(b!!.length ?: 0)`","correct":false},{"text":"`println(b?.length ?: 0)`","correct":true},{"text":"`println(b?.length ?? 0)`","correct":false},{"text":"`println(b == null? 0: b.length)`","correct":false}],"illustrator":""},{"question":". In the file main.kt, you are filtering a list of integers and want to use an already existing function, removeBadValues. What is the proper way to invoke the function from filter in the line below?","options":[{"text":"`::removeBadValues`","correct":true},{"text":"`GlobalScope.removeBadValues()`","correct":false},{"text":"`Mainkt.removeBadValues`","correct":false},{"text":"`removeBadValues`","correct":false}],"illustrator":"```kotlin\nval list2 = (80..100).toList().filter(_____)\n```"},{"question":". Which code snippet correctly shows a for loop using a range to display \"1 2 3 4 5 6\"?","options":[{"text":"`for(z in 1..7) println(\"$z \")`","correct":false},{"text":"`for(z in 1..6) print(\"$z \")`","correct":true},{"text":"`for(z in 1 to 6) print(\"$z \")`","correct":false},{"text":"`for(z in 1..7) print(\"$z \")`","correct":false}],"illustrator":""},{"question":". You are upgrading a Java class to Kotlin. What should you use to replace the Java class's static fields?","options":[{"text":"an anonymous object","correct":false},{"text":"a static property","correct":false},{"text":"a companion object","correct":true},{"text":"a backing field","correct":false}],"illustrator":""},{"question":". Your code need to try casting an object. If the cast is not possible, you do not want an exception generated, instead you want null to be assigned. Which operator can safely cast a value?","options":[{"text":"`as?`","correct":true},{"text":"`??`","correct":false},{"text":"`is`","correct":false},{"text":"`as`","correct":false}],"illustrator":""},{"question":". Kotlin will not compile this code snippet. What is wrong?","options":[{"text":"In order to inherit from a class, it must be marked **open**","correct":true},{"text":"In order to inherit from a class, it must be marked **public**","correct":false},{"text":"In order to inherit from a class, it must be marked **sealed**","correct":false},{"text":"In order to inherit from a class, it must be marked **override**","correct":false}],"illustrator":"```kotlin\nclass Employee\nclass Manager : Employee()\n```"},{"question":". Which function changes the value of the element at the current iterator location?","options":[{"text":"`change()`","correct":false},{"text":"`modify()`","correct":false},{"text":"`set()`","correct":true},{"text":"`assign()`","correct":false}],"illustrator":""},{"question":". From the Supervisor subclass, how do you call the Employee class's display() method?","options":[{"text":"`Employee.display() `","correct":false},{"text":"`::display()`","correct":false},{"text":"`super.display()`","correct":true},{"text":"`override.display()`","correct":false}],"illustrator":"```kotlin\nopen class Employee(){\n  open fun display() = println(\"Employee display()\")\n}\nclass Supervisor : Employee() {\n  override fun display() {\n    println(\"Supervisor display()\")\n  }\n}\n```"},{"question":". The code below compiled and executed without issue before the addition of the line declaring errorStatus. Why does this line break the code?","options":[{"text":"`StatusError` is an object, not a class and cannot be instantiated","correct":true},{"text":"Only one instance of the class `Status` can be instantiated at a time","correct":false},{"text":"`Status.Error` must be declared as an immutable type","correct":false},{"text":"`Status.Error` is pribate to class and cannot be declared externally","correct":false}],"illustrator":"```kotlin\nsealed class Status(){\n  object Error : Status()\n  class Success : Status()\n}\nfun main(){\n  var successStatus = Status.Success()\n  var errorStatus = Status.Error()\n}\n```"},{"question":". The code below is expected to display the numbers from 1 to 10, but it does not. Why?","options":[{"text":"You cannot assign a sequence to a variable","correct":false},{"text":"To produce result, a sequence must have terminal operation. In this case, it needs a `.toList()`","correct":true},{"text":"The `.filter{ it < 11 }` should be `.filter{ it > 11 }`","correct":false},{"text":"The `yieldAll(1..20)` should be `yieldAll(1..10)`","correct":false}],"illustrator":"```kotlin\nval seq = sequence { yieldAll(1..20) }\n  .filter { it < 11 }\n  println(seq)\n```"},{"question":". What three methods does this class have?","options":[{"text":"`equals(), hashCode(), and toString()`","correct":true},{"text":"`equals(), toHash(), and super()`","correct":false},{"text":"`print(), println(), and toString()`","correct":false},{"text":"`clone(), equals(), and super()`","correct":false}],"illustrator":"```kotlin\nclass Person\n```"},{"question":". Which is the proper way to declare a singleton named DatabaseManager?","options":[{"text":"`object DatabaseManager {}`","correct":true},{"text":"`singleton DatabaseManager {}`","correct":false},{"text":"`static class DatabaseManager {}`","correct":false},{"text":"`data class DatabaseManager {}`","correct":false}],"illustrator":""},{"question":". In order to subclass the Person class, what is one thing you must do?","options":[{"text":"The subclass must be marked sealed","correct":false},{"text":"You must override the `displayJob()` method","correct":true},{"text":"You must mark the subclass as final","correct":false},{"text":"An abstract class cannot be extended, so you must change it to open","correct":false}],"illustrator":"```kotlin\nabstract class Person(val name: String) {\n  abstract fun displayJob(description: String)\n}\n```"},{"question":". The code snippet below translates a database user to a model user. Because their names are both User, you must use their fully qualified names, which is cumbersome. You do not have access to either of the imported classes' source code. How can you shorten the type names?","options":[{"text":"Use import as to change the type name","correct":true},{"text":"Create subtypes with shorter names","correct":false},{"text":"Create interfaces with shorter names","correct":false},{"text":"Create extension classes with shorter names","correct":false}],"illustrator":"```kotlin\nimport com.tekadept.app.model.User\nimport com.tekadept.app.database.User\nclass UserService{\n  fun translateUser(user: com.tekadept.app.database.User): User =\n    com.tekadept.app.model.User(\"${user.first} ${user.last}\")\n}\n```"},{"question":". Your function is passed by a parameter obj of type Any. Which code snippet shows a way to retrieve the original type of obj, including package information?","options":[{"text":"`obj.classInfo()`","correct":false},{"text":"`obj.typeInfo()`","correct":false},{"text":"`obj::class.simpleName`","correct":false},{"text":"`obj::class`","correct":true}],"illustrator":""},{"question":". Which is the correct declaration of an integer array with a size of 5?","options":[{"text":"`val arrs[5]: Int`","correct":false},{"text":"`val arrs = IntArray(5)`","correct":true},{"text":"`val arrs: Int[5]`","correct":false},{"text":"`val arrs = Array<Int>(5)`","correct":false}],"illustrator":""},{"question":". You have created a class that should be visible only to the other code in its module. Which modifier do you use?","options":[{"text":"`internal`","correct":true},{"text":"`private`","correct":false},{"text":"`public`","correct":false},{"text":"`protected`","correct":false}],"illustrator":""},{"question":". Kotlin has two equality operators, == and ===. What is the difference?","options":[{"text":"`==` determines if two primitive types are identical. `===` determines if two objects are identical","correct":false},{"text":"`==` determines if two references point to the same object. `===` determines if two objects have the same value","correct":false},{"text":"`==` determines if two objects have the same value. `===` determines if two strings have the same value","correct":false},{"text":"`==` determines if two objects have the same value. `===` determines if two references point to the same object","correct":true}],"illustrator":""},{"question":". Which snippet correctly shows setting the variable max to whichever variable holds the greatest value, a or b, using idiomatic Kotlin?","options":[{"text":"`val max3 = a.max(b)` (Extension Function is One of the idiomatic Solutions in Kotlin)","correct":true},{"text":"`val max = a > b ? a : b`","correct":false},{"text":"`val max = if (a > b) a else b`","correct":false},{"text":"`if (a > b) max = a else max = b`","correct":false}],"illustrator":""},{"question":". You have an enum class Signal that represents the state of a network connection. You want to print the position number of the SENDING enum. Which line of code does that?","options":[{"text":"`println(Signal.SENDING.position())`","correct":false},{"text":"`println(Signal.SENDING.hashCode())`","correct":false},{"text":"`println(Signal.SENDING)`","correct":false},{"text":"`println(Signal.SENDING.ordinal)`","correct":true}],"illustrator":"```java\nenum class Signal { OPEN, CLOSED, SENDING }\n```"},{"question":". Both const and @JvmField create constants. What can const do that @JvmField cannot?","options":[{"text":"`const` is compatible with Java, but `@JvmField` is not","correct":false},{"text":"The compiler will inline const so it is faster and more memory efficient","correct":true},{"text":"Virtually any type can be used with const but not `@JvmField`","correct":false},{"text":"const can also be used with mutable types","correct":false}],"illustrator":"```java\nclass Detail {\n  companion object {\n    const val COLOR = \"Blue\"\n    @JvmField val SIZE = \"Really Big\"\n  }\n}\n```"},{"question":". You have a when expression for all of the subclasses of the class Attribute. To satisfy the when, you must include an else clause. Unfortunately, whenever a new subclass is added, it returns unknown. You would prefer to remove the else clause so the compiler generates an error for unknown subtypes. What is one simple thing you can do to achieve this?","options":[{"text":"Replace `open` with `closed`","correct":false},{"text":"Replace `open` with `sealed`","correct":true},{"text":"Replace `open` with `private`","correct":false},{"text":"Replace `open` with `public`","correct":false}],"illustrator":"```kotlin\nopen class Attribute\nclass Href: Attribute()\nclass Src: Attribute()\nclass Alt: Attribute()\nfun getAttribute(attribute: Attribute) : String {\n  return when (attribute) {\n    is Href -> \"href\"\n    is Alt -> \"alt\"\n    is Src -> \"src\"\n    else -> \"unknown\"\n  }\n}\n```"},{"question":". You would like to know each time a class property is updated. Which code snippet shows a built-in delegated property that can accomplish this?","options":[{"text":"`Delegates.watcher()`","correct":false},{"text":"`Delegates.observable()`","correct":true},{"text":"`Delegates.rx()`","correct":false},{"text":"`Delegates.observer()`","correct":false}],"illustrator":""},{"question":". Why doesn't this code compile?","options":[{"text":"infix function must be marked public","correct":false},{"text":"In Kotlin, add is a keyword","correct":false},{"text":"Extension functions use `it`, not `this`, as the default parameter name","correct":false},{"text":"infix functions cannot have default values","correct":true}],"illustrator":"```kotlin\nval addend = 1\ninfix fun Int.add(added: Int=1) = this + addend\nfun main(){\n  val msg = \"Hello\"\n  println( msg shouldMatch \"Hello\")\n  println( 10 multiply 5 + 2)\n  println( 10 add 5)\n}\n```"},{"question":". What is the correct way to initialize a nullable variable?","options":[{"text":"`val name = null`","correct":false},{"text":"`var name: String`","correct":false},{"text":"`val name: String`","correct":false},{"text":"`val name: String? = null`","correct":true}],"illustrator":""},{"question":". Which line of code is a shorter, more idiomatic version of the displayed snippet?","options":[{"text":"`val len = x?.let{x.len} else {-1}`","correct":false},{"text":"`val len = x!!.length ?: -1`","correct":false},{"text":"`val len:Int = (x != null)? x.length : -1`","correct":false},{"text":"`val len = x?.length ?: -1`","correct":true}],"illustrator":"```kotlin\nval len: Int = if (x != null) x.length else -1\n```"},{"question":". You are creating a Kotlin unit test library. What else should you add to make the following code compile without error?","options":[{"text":"The extension function should be marked public","correct":false},{"text":"Add the prefix operator to the shouldMatch extension function","correct":false},{"text":"The code is not legal in Kotlin (should be `println(msg.shouldEqual(\"test message\"))`)","correct":false},{"text":"Add the prefix infix to the shouldMatch extension function","correct":true}],"illustrator":"```kotlin\nfun String.shouldEqual(value: String) = this == value\nfun main(){\n  val msg = \"test message\"\n  println(msg shouldEqual \"test message\")\n}\n```"},{"question":". What is the difference between the declarations of COLOR and SIZE?","options":[{"text":"Since `COLOR` and `SIZE` are both immutable, they are identical internally","correct":false},{"text":"Both are immutable, but the use of the keyword const makes `COLOR` slower and less space efficient than `SIZE`","correct":false},{"text":"const makes `COLOR` faster, but not compatible with Java. Without const, `SIZE` is still compatible with Java","correct":false},{"text":"Both are immutable, but the use of the keyword const makes `COLOR` faster and more space efficient than `SIZE`","correct":true}],"illustrator":"```kotlin\nclass Record{\n  companion object {\n    const val COLOR = \"Red\"\n    val SIZE = \"Large\"\n  }\n}\n```"},{"question":". Why does not this code snippet compile?","options":[{"text":"Because name is a class parameter, not a property-it is unresolved `main()`.","correct":false},{"text":"In order to create an instance of a class, you need the keyword `new`","correct":false},{"text":"The reference to name needs to be scoped to the class, so it should be `this.name`","correct":false},{"text":"Classes cannot be immutable. You need to change `var` to `val`","correct":true}],"illustrator":"```kotlin\nclass Cat (name: String) {\n  fun greet() { println(\"Hello ${this.name}\") }\n}\nfun main() {\n  val thunderCat = Cat(\"ThunderCat\")\n  thunderCat.greet()\n}\n```"},{"question":". The code below shows a typical way to show both index and value in many languages, including Kotlin. Which line of code shows a way to get both index and value more idiomatically?","options":[{"text":"`for( (ndx, value) in (1..20).withIndex() ){`","correct":true},{"text":"`for( (ndx, value) in (1..20).pair() ){`","correct":false},{"text":"`for( Pair(ndx, value) in 1..20 ){`","correct":false},{"text":"`for( (ndx, value) in *(1..20) ){`","correct":false}],"illustrator":"```kotlin\nvar ndx = 0;\nfor (value in 1..5){\n  println(\"$ndx - $value\")\n  ndx++\n}\n```"},{"question":". The Kotlin .. operator can be written as which function?","options":[{"text":"`a.from(b)`","correct":false},{"text":"`a.range(b)`","correct":false},{"text":"`a.rangeTo(b)`","correct":true},{"text":"`a.to(b)`","correct":false}],"illustrator":""},{"question":". How can you retrieve the value of the property codeName without referring to it by name or destructuring?","options":[{"text":"`proj.0`","correct":false},{"text":"`proj[0]`","correct":false},{"text":"`proj[1]`","correct":false},{"text":"`proj.component1()`","correct":true}],"illustrator":"```kotlin\ndata class Project(var codeName: String, var version: String)\nfun main(){\n  val proj = Project(\"Chilli Pepper\", \"2.1.0\")\n}\n```"},{"question":". This function generates Fibonacci sequence. Which function is missing?","options":[{"text":"`with()`","correct":false},{"text":"`yield()`","correct":true},{"text":"`skip()`","correct":false},{"text":"`return()`","correct":false}],"illustrator":"```kotlin\nfun fibonacci() = sequence {\n  var params = Pair(0, 1)\n  while (true) {\n    ___(params.first)\n    params = Pair(params.second, params.first + params.second)\n  }\n}\n```"},{"question":". In this code snippet, why does the compiler not allow the value of y to change?","options":[{"text":"`y` must be declared with `var` to be mutable","correct":false},{"text":"`y` is an implicitly immutable value","correct":true},{"text":"`y` can change only in a while loop","correct":false},{"text":"In order to change `y`, it must be declared outside of the loop","correct":false}],"illustrator":"```kotlin\nfor(y in 1..100) y+=2\n```"},{"question":". You have created a data class, Point, that holds two properties, x and y, representing a point on a grid. You want to use the hash symbol for subtraction on the Point class, but the code as shown will not compile. How can you fix it?","options":[{"text":"You cannot; the hash symbol is not a valid operator.","correct":false},{"text":"You should replace the word hash with octothorpe, the actual name for the symbol.","correct":false},{"text":"You should use `minus` instead of hash, then type alias the minus symbol. // Note: How can you fix it?","correct":true},{"text":"You need to replace operator with the word `infix`.","correct":false}],"illustrator":"```kotlin\ndata class Point(val x: Int, val y: Int)\noperator fun Point.plus(other: Point) = Point(x + other.x, y + other.y)\noperator fun Point.hash(other: Point) = Point(x - other.x, y - other.y)\nfun main() {\n    val point1 = Point(10, 20)\n    val point2 = Point(20, 30)\n    println(point1 + point2)\n    println(point1 # point2)\n}\n```"},{"question":". This code snippet compiles without error, but never prints the results when executed. What could be wrong?","options":[{"text":"The sequence lacks a terminal operation.","correct":true},{"text":"The sequence is infinite and lacks an intermediate operation to make `it` finite.","correct":false},{"text":"The expression should begin with `generateSequence(0)`.","correct":false},{"text":"The `it` parameter should be replaced with `this`.","correct":false}],"illustrator":"```kotlin\nval result = generateSequence(1) { it + 1 }.toList()\nprintln(result)\n```"},{"question":". An error is generated when you try to compile the following code. How should you change the call to printStudents to fix the error?","options":[{"text":"`printStudents(students.toList())`","correct":false},{"text":"`printStudents(students!!)`","correct":false},{"text":"`printStudents(*students)`","correct":true},{"text":"`printStudents(students[])`","correct":false}],"illustrator":"```kotlin\nfun main() {\n    val students = arrayOf(\"Abel\", \"Bill\", \"Cindy\", \"Darla\")\n    printStudents(students)\n}\nfun printStudents(vararg students: String) {\n    for(student in students) println(student)\n}\n```"},{"question":". Both y and z are immutable references pointing to fixed-size collections of the same four integers. Are there any differences?","options":[{"text":"You can modify the contents of the elements in `y` but not `z`.","correct":true},{"text":"There are not any differences. `y` and `z` are a type alias of the same type.","correct":false},{"text":"You add more elements to `z` since it is a list.","correct":false},{"text":"You can modify the contents of the elements in `z` but not `y`.","correct":false}],"illustrator":"```kotlin\nval y = arrayOf(10, 20, 30, 40)\nval z = listOf(10, 20, 30, 40)\n```"},{"question":". The code snippet compile and runs without issue, but does not wait for the coroutine to show the \"there\" message. Which line of code will cause the code to wait for the coroutine to finish before exiting?","options":[{"text":"`task.complete()`","correct":false},{"text":"`task.wait()`","correct":false},{"text":"`task.join()`","correct":true},{"text":"`task.cancel()`","correct":false}],"illustrator":"```kotlin\nfun main() = runBlocking {\n    val task = GlobalScope.launch {\n        delay(1000L)\n        println(\"there\")\n    }\n    println(\"Hello,\")\n}\n```"},{"question":". You would like to group a list of students by last name and get the total number of groups. Which line of code accomplishes this, assuming you have a list of the Student data class?","options":[{"text":"`println(students.groupBy{ it.lastName }.count())`","correct":true},{"text":"`println(students.groupBy{ it.lastName.first() }.fold().count())`","correct":false},{"text":"`println(students.groupingBy{ it.lastName.first() }.count())`","correct":false},{"text":"`println(students.groupingBy{ it.lastName.first() }.size())`","correct":false}],"illustrator":"```kotlin\ndata class Student(val firstName: String, val lastName: String)\n```"},{"question":". Class BB inherits from class AA. BB uses a different method to calculate the price. As shown, the code does not compile. What changes is needed to resolve the compilation error?","options":[{"text":"You need to add a lateinit modifier to `AA.price`.","correct":false},{"text":"You simply need to add an override modifier to `BB.price`.","correct":false},{"text":"You need to add an open modifier to `AA.price` and an override modifier to `BB.price`.","correct":true},{"text":"You need to add a public modifier to `AA.price` and a protected modifier to `BB.price`.","correct":false}],"illustrator":"```kotlin\nopen class AA() {\n     var price: Int = 0\n        get() = field + 10\n}\nclass BB() : AA() {\n     var price: Int = 0\n        get() = field + 20\n}\n```"},{"question":". What is the output of this code?","options":[{"text":"The length of the quote is The eagle has landed.","correct":false},{"text":"A compilation error is displayed.","correct":false},{"text":"The length of the quote is `21`","correct":false},{"text":"The length of the quote is `The eagle has landed..length`","correct":true}],"illustrator":"```kotlin\nval quote = \"The eagle has landed.\"\nprintln(\"The length of the quote is $quote.length\")\n```"},{"question":". You have an unordered list of high scores. Which is the simple method to sort the highScores in descending order?","options":[{"text":"`.sortedByDescending()`","correct":false},{"text":"`.descending()`","correct":false},{"text":"`.sortedDescending()`","correct":true},{"text":"`.sort(\"DESC\")`","correct":false}],"illustrator":"```kotlin\nfun main() {\n    val highScores = listOf(4000, 2000, 10200, 12000, 9030)\n```"},{"question":". Your class has a property name that gets assigned later. You do not want it to be a nullable type. Using a delegate, how should you declare it?","options":[{"text":"`lateinit var name: String` // lateinit is modifier not delegate","correct":false},{"text":"`var name: String by lazy`","correct":false},{"text":"`var name: String by Delegates.notNull()`","correct":true},{"text":"`var name: String? = null`","correct":false}],"illustrator":""},{"question":". You want to know each time a class property is updated. If the new value is not within range, you want to stop the update. Which code snippet shows a built-in delegated property that can accomplish this?","options":[{"text":"`Delegates.vetoable()`","correct":true},{"text":"`Delegates.cancellable()`","correct":false},{"text":"`Delegates.observer()`","correct":false},{"text":"`Delegates.watcher()`","correct":false}],"illustrator":""},{"question":". Which line of code shows how to call a Fibonacci function, bypass the first three elements, grab the next six, and sort the elements in descending order?","options":[{"text":"`val sorted = fibonacci().skip(3).take(6).sortedDescending().toList()`","correct":false},{"text":"`val sorted = fibonacci().skip(3).take(6).sortedByDescending().toList()`","correct":false},{"text":"`val sorted = fibonacci().skip(3).limit(6).sortedByDescending().toList()`","correct":false},{"text":"`val sorted = fibonacci().drop(3).take(6).sortedDescending().toList()`","correct":true}],"illustrator":""},{"question":". You have two arrays, a and b. Which line combines a and b as a list containing the contents of both?","options":[{"text":"`val c = list of (a, b)`","correct":false},{"text":"`val c = a + b`","correct":false},{"text":"`val c = listOf(a+b)`","correct":false},{"text":"`val c = listOf(*a, *b)`","correct":true},{"text":"erence](https://www.techiedelight.com/join-two-lists-kotlin/)","correct":false}],"illustrator":"```kotlin\nval a = arrayOf(1, 2, 3)\nval b = arrayOf(100, 200, 3000)\n```"},{"question":". This code is occasionally throwing a null pointer exception (NPE). How can you change the code so it never throws as NPE?","options":[{"text":"Replace `!!.` with `?.`","correct":true},{"text":"Replace `!!.` with `?:.`","correct":false},{"text":"Surround the line with a try/catch block.","correct":false},{"text":"Replace `!!.` with `?.let`.","correct":false}],"illustrator":"```kotlin\nprintln(\"length of First Name = ${firstName!!.length}\")\n```"},{"question":". What is the execution order of init blocks and properties during initialization?","options":[{"text":"All of the properties are executed in order of appearance, and then the init blocks are executed.","correct":false},{"text":"The init blocks and properties are executed in the same order they appear in the code.","correct":true},{"text":"All of the init blocks are executed in order of appearance, and then the properties are executed.","correct":false},{"text":"The order of execution is not guaranteed, so code should be written accordingly.","correct":false}],"illustrator":""},{"question":". Both const and @JvmField create constants. What can @JvmField do that const cannot?","options":[{"text":"`const` works only with strings and primitives. `@JvmField` does not have that restriction.","correct":true},{"text":"`@JvmField` works as a top-level variable, but `const` works only in a class.","correct":false},{"text":"`@JvmField` is compatible with Java, but `const` is not.","correct":false},{"text":"`@JvmField` is always inlined for faster code.","correct":false}],"illustrator":"```kotlin\nclass Styles {\n  companion object {\n    const val COLOR = \"Blue\"\n      @JvmField val SIZE = \"Really big\"\n   }\n}\n```"},{"question":". What are the two ways to make a coroutine's computation code cancellable?","options":[{"text":"Call the `yield()` function or check the `isActive` property.","correct":true},{"text":"Call the `cancelled()` function or check the `isActive` property.","correct":false},{"text":"Call the `stillActive()` function or check the `isCancelled` property.","correct":false},{"text":"Call the `checkCancelled()` function or check the `isCancelled` property.","correct":false}],"illustrator":""},{"question":". Given the code below, how can you write the line this.moveTo(\"LA\") more concisely?","options":[{"text":"`moveTo(\"LA\")`","correct":true},{"text":"`::moveTo(\"LA\")`","correct":false},{"text":"`_.moveTo(\"LA\")`","correct":false},{"text":"`it.moveTo(\"LA\")`","correct":false}],"illustrator":"```kotlin\ndata class Student (val name: String, var location: String) {\n  fun moveTo (newLoc: String) { location = newLoc }\n}\nfun main() {\n  Student (\"Snow\", \"Cologne\").run {\n  this.moveTo (\"LA\")\n}\n```"},{"question":". For the Product class you are designing, you would like the price to be readable by anyone, but changeable only from within the class. Which property declaration implements your design?","options":[{"text":"Option 1","correct":false},{"text":"Option 2 ([reference](https://kotlinlang.org/docs/properties.html#getters-and-setters))","correct":true},{"text":"Option 3","correct":false},{"text":"Option 4","correct":false}],"illustrator":"```\nval price: Int=0\n```"},{"question":". What will happen when you try to build and run this code snippet?","options":[{"text":"A syntax error occurs due to the line `SpecialFunction()()`.","correct":false},{"text":"The message \"An Error occurred\" is displayed.","correct":false},{"text":"The message \"Invoked from an instance.\" is displayed. // the second \"()\" is equals to .invoke()","correct":true},{"text":"A compile error occurs. You cannot override the `invoke()` method.","correct":false}],"illustrator":"```kotlin\nclass SpecialFunction : () -> Unit {\n  override fun invoke() {\n    println(\"Invoked from an instance.\")\n  }\n}\nfun main() {\n  try { SpecialFunction()() }\n  catch (ex: Exception) { println(\"An error occurred\") }\n}\n```"},{"question":". Which statement declares a variable mileage whose value never changes and is inferred to be an integer?","options":[{"text":"`val mileage:Int = 566`","correct":false},{"text":"`var mileage:Int = 566`","correct":false},{"text":"`val mileage = 566` (Note: inferred)","correct":true},{"text":"`const int mileage = 566`","correct":false}],"illustrator":""},{"question":". What is the preferred way to create an immutable variable of type long?","options":[{"text":"`var longInt = 10L`","correct":false},{"text":"`const long longInt = 10`","correct":false},{"text":"`val longInt = 10L`","correct":true},{"text":"`val longInt:Long = 10`","correct":false}],"illustrator":""},{"question":". Which line converts the binaryStr, whish contain only 0s and 1s, to an integer representing its decimal value?","options":[{"text":"`val myInt = toInt(binaryStr)`","correct":false},{"text":"`val myInt = binaryStr.toInt(\"0b\")`","correct":false},{"text":"`val myInt = binaryStr.toInt()`","correct":false},{"text":"`val myInt = binaryStr.toInt(2)`","correct":true}],"illustrator":"```kotlin\nval binaryStr = \"00001111\"\n```"},{"question":". In a Kotlin program, which lines can be marked with a label","options":[{"text":"`Any program line can be marked with a label`","correct":false},{"text":"`Any statement can be marked with a label`","correct":false},{"text":"`Any expression can be marked with a label`","correct":true},{"text":"`Only the beginning of loops can be marked with a label`","correct":false}],"illustrator":""},{"question":". All classes in Kotlin inherit from which superclass?","options":[{"text":"`Default`","correct":false},{"text":"`Super`","correct":false},{"text":"`Any`","correct":true},{"text":"`Object`","correct":false}],"illustrator":""},{"question":". You have written a function, sort(), that should accept only collections that implement the `Comparable` interface. How can you restrict the function?","options":[{"text":"`Add <T -> Comparable<T>> between the `fun` keyword and the function name`","correct":false},{"text":"`Add Comparable<T> between the `fun` keyword and the function name`","correct":false},{"text":"`Add <T : Comparable<T>> between the `fun` keyword and the function name`","correct":true},{"text":"`Add <T where Comparable<T>> between the `fun` keyword and the function name`","correct":false}],"illustrator":"```kotlin\nfun sort(list: List<T>): List <T> {\n    return list.sorted()\n}\n```"},{"question":". Kotlin classes are final by default. What does final mean?","options":[{"text":"final means that you cannot use interfaces with this class.","correct":false},{"text":"final means that this is the only file that can use the class.","correct":false},{"text":"final means that you cannot extend the class.","correct":true},{"text":"final classes cannot be used in the finally section of a try/catch block.","correct":false}],"illustrator":""},{"question":". You have created an array to hold three strings. When you run the code bellow, the compiler displays an error. Why does the code fail?","options":[{"text":"Arrays use zero-based indexes. The value 3 is outside of the array's bounds","correct":true},{"text":"You accessed the element with an index but should have used.set().","correct":false},{"text":"You declared the array with val but should have used var","correct":false},{"text":"You cannot changes the value of an element of an array. You should have used a mutable list.","correct":false}],"illustrator":"```\nval names = arrayOf<String>(3)\nnames[3]= \"Delta\"\n```"},{"question":". If a class has one or more secondary constructors, what must each of them do?","options":[{"text":"Each secondary constructor must call super().","correct":false},{"text":"Each secondary constructor must call base().","correct":false},{"text":"Each secondary constructor must directly or indirectly delegate to the primary.","correct":true},{"text":"Each secondary constructor must have the same name as the class.","correct":false}],"illustrator":""},{"question":". When you can omit constructor keyword from the primary constructor?","options":[{"text":"It can be omitted only if an init block is defined.","correct":false},{"text":"It can be omitted anytime; it is not mandatory.","correct":false},{"text":"It can be omitted if secondary constructors are defined.","correct":false},{"text":"It can be omitted when the primary constructor does not have any modifiers or annotations.","correct":true},{"text":"le](https://www.baeldung.com/kotlin/constructors#:~:text=In%20some%20cases%2C%20we%20can,default%20parameters%20in%20the%20constructors.) - [reference](https://kotlinlang.org/docs/classes.html#constructors)","correct":false}],"illustrator":""},{"question":". How many different kinds of constructors are available for kotlin classes?","options":[{"text":"two.","correct":true},{"text":"none.","correct":false},{"text":"four.","correct":false},{"text":"one.","correct":false}],"illustrator":""},{"question":". What is the default visibility modifier in Kotlin?","options":[{"text":"protected","correct":false},{"text":"private","correct":false},{"text":"internal","correct":false},{"text":"public","correct":true}],"illustrator":""},{"question":". The code below compiles and executes without issue, but is not idiomatic kotlin. What is a better way to impelement the `printlln()`?","options":[{"text":"Use `new printf()`.","correct":false},{"text":"Use `string.format` instead.","correct":false},{"text":"Use `string append` instead.","correct":false},{"text":"Use string templates instead.","correct":true}],"illustrator":"```kotlin\nfun main() {\n  val name: String = \"Amos\"\n  val grade: Float = 95.5f\n  println(\"My name is \" + name + \". I score \" + grade + \" points on the last coding quiz.\")\n}\n```"}]